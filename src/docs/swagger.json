{
  "openapi": "3.0.0",
  "info": {
    "description": "Platform where users can manage and join programming projects",
    "version": "1.0.0",
    "title": "Build Me",
    "contact": { "email": "daniln2209@gmail.com" }
  },
  "schemes": ["http"],
  "host": "localhost:3000",
  "basePath": "/",
  "tags": [
    {
      "name": "Answers",
      "description": "Manage the available answers for each question"
    },
    {
      "name": "Learners",
      "description": "Allow users to associate with a vacancy as learners, individuals who will learn about the technologies required for the vacancy with the help of the selected candidate"
    },
    {
      "name": "Projects",
      "description": "Manage programming projects where the users can colaborate by joining on related vacancies"
    },
    {
      "name": "Questions",
      "description": "Manage the questions that can be associated with answers and used to create tests for evaluating the userâ€™s skills"
    },
    {
      "name": "Rankings",
      "description": "Displays user information sorted into rankings based on various parameters, such as: the highest number of reviews received, the highest number of project participations, and more"
    },
    {
      "name": "Ratings",
      "description": "Manage the ratings that were created to assess the performance of colleagues in a project"
    },
    {
      "name": "Technologies",
      "description": "Administer the technologies that can be designated as requirements for projects' vacancies and user skills"
    },
    {
      "name": "Tests",
      "description": "Management of tests that evaluate the skill level of a user in a certain technology"
    },
    {
      "name": "Users",
      "description": "Manage the users that can use the platform"
    },
    {
      "name": "User skills",
      "description": "Displays user skills in the technologies registered on the platform"
    },
    {
      "name": "Vacancies",
      "description": "Manages the available positions in the projects where users can apply and start actively participating in the project"
    },
    {
      "name": "Vacancy requirements",
      "description": "Manages the requirements that a user should meet to candidate to a project's vacancy"
    },
    {
      "name": "Vacancy subscriptions",
      "description": "Allow the user to candidate to project vacancies for which they meet the requirements"
    },
    {
      "name": "Votations",
      "description": "Allow a project owner to manage votations that ban users related to the project's vacancies"
    },
    {
      "name": "Votes",
      "description": "Manage votes in a votation to ban a user from a vacancy"
    }
  ],
  "paths": {
    "/answers": {
      "post": {
        "summary": "Create one or more answers",
        "description": "Create answers for questions that users can select during tests",
        "produces": ["application/json"],
        "tags": ["Answers"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/newAnswer"
                }
              },
              "examples": {
                "Valid body": {
                  "value": [
                    {
                      "answer": "HTML defines the structure of a web page",
                      "questionId": 1,
                      "isRight": true
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "One or more answers created with success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdAnswer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "One or more answers are missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodErrorMessageList"
                },
                "examples": {
                  "Missing properties and invalid formats": {
                    "value": [
                      {
                        "0": [
                          "Required",
                          "Expected number, received string",
                          "Expected boolean, received string"
                        ]
                      }
                    ]
                  },
                  "Wrong question id": {
                    "value": [
                      {
                        "0": ["No question with the informed id was found"]
                      }
                    ]
                  },
                  "The answer was marked as right while the related question was already associated with another right answer": {
                    "value": [
                      {
                        "0": ["This question already has a right answer"]
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user didn't include the token before sending the request, it was invalid or the user doesn't have permission to access the route",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/answers/questions/{questionId}": {
      "get": {
        "summary": "Question's related answers",
        "description": "Shows all the answers related to a specific question",
        "produces": ["application/json"],
        "tags": ["Answers"],
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Id of the question for which the related answers should be shown",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All the answers related to the question",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdAnswer"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided question id does not correspond to any question identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No question with the informed id was found"
                }
              }
            }
          },
          "401": {
            "description": "The user didn't include the token before sending the request, it was invalid or the user doesn't have permission to access the route",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/answers/{id}": {
      "get": {
        "summary": "Get a specific answer",
        "description": "Show the data of a specific answer",
        "produces": ["application/json"],
        "tags": ["Answers"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the answer that should be shown",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data for the provided answer id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdAnswer"
                }
              }
            }
          },
          "404": {
            "description": "The provided answer id does not correspond to any answer identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No answer with the informed id was found"
                }
              }
            }
          },
          "401": {
            "description": "The user didn't include the token before sending the request, it was invalid or the user doesn't have permission to access the route",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a specific answer",
        "description": "Update one or more fields of a specific answer",
        "produces": ["application/json"],
        "tags": ["Answers"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the answer that should be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/updatedAnswer"
              },
              "examples": {
                "Valid body": {
                  "value": {
                    "answer": "HTML is a markup language"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The answer was updated with success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdAnswer"
                }
              }
            }
          },
          "400": {
            "description": "The format of one or more values being updated is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "examples": {
                  "Values with invalid formats": {
                    "value": {
                      "answer": ["Expected string, received number"],
                      "isRight": ["Expected boolean, received string"]
                    }
                  },
                  "The answer was marked as right while the related question was already associated with another right answer": {
                    "value": {
                      "message": "This questions already has a right answer"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user didn't include the token before sending the request, it was invalid or the user doesn't have permission to access the route",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a specific answer",
        "description": "",
        "produces": ["application/json"],
        "tags": ["Answers"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the answer that should be deleted",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The answer was deleted with success"
          },
          "404": {
            "description": "The provided answer id does not correspond to any answer identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No answer with the informed id was found"
                }
              }
            }
          },
          "401": {
            "description": "The user didn't include the token before sending the request, it was invalid or the user doesn't have permission to access the route",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/learners": {
      "post": {
        "summary": "Create a new learner",
        "description": "Create a learner associated with a vacancy",
        "tags": ["Learners"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/newLearner"
              },
              "examples": {
                "Valid body": {
                  "value": {
                    "vacancyId": 14
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Learner created with success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdLearner"
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "examples": {
                  "Invalid vacancyId": {
                    "value": {
                      "vacancyId": ["Expected number, received string"]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user didn't include the token before sending the request, it was invalid or the user doesn't have permission to access the route",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided vacancy id does not correspond to any vacancy identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No vacancy with the informed id was found"
                }
              }
            }
          },
          "409": {
            "description": "The user already created a learner record related to the same vacancy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "This user was already registered as a learner for this vacancy"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "User reached learner association limit": {
                    "description": "The user has registered three times as a learner for different vacancies from open projects and is attempting to become a learner for another vacancy",
                    "value": {
                      "message": "The user has already reached the limit of 3 subscriptions as a learner"
                    }
                  },
                  "Vacancy reached learner association limit": {
                    "description": "Each vacancy has a limit of learners that can be related and this one have reached its limit",
                    "value": {
                      "message": "It's not possible to add a new learner, the limit of 5 learners related to this vacancy was already reached"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all learners",
        "description": "Retrieve a list of all learners",
        "tags": ["Learners"],
        "responses": {
          "200": {
            "description": "List of all learners",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdLearner"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/learners/vacancies/{vacancyId}": {
      "get": {
        "summary": "Get learners by vacancy id",
        "description": "Retrieve learners associated with a specific vacancy",
        "tags": ["Learners"],
        "parameters": [
          {
            "name": "vacancyId",
            "in": "path",
            "description": "Id of the vacancy",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of learners associated with the vacancy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdLearner"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Vacancy id not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No vacancy with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/learners/users/{candidateId}": {
      "get": {
        "summary": "Get learners by candidate/user id",
        "description": "Retrieve learner records linked to the user with the given id",
        "tags": ["Learners"],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of records with which the user, identified by the provided id, is associated as a learner",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdLearner"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No user with the specified id was found in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No candidate with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/learners/{id}": {
      "get": {
        "summary": "Get a learner by id",
        "description": "Retrieve the data of a specific learner by id",
        "tags": ["Learners"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the learner to be shown",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data of the learner's record whose id was provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdLearner"
                }
              }
            }
          },
          "404": {
            "description": "No learner record with the provided id was found in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No learner with the informed id was found"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a learner by id",
        "description": "Delete the learner's record whose id was provided",
        "tags": ["Learners"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the learner to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Learner deleted successfully"
          },
          "404": {
            "description": "No learner record with the provided id was found in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No learner with the informed id was found"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "The user is not an admin and is trying to delete a record related with other user",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects": {
      "post": {
        "summary": "Create a new project",
        "description": "Create a new programming project",
        "tags": ["Projects"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/newProject"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdProject"
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "examples": {
                  "Invalid body": {
                    "value": {
                      "name": ["Expected string, received number"]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "The user doesn't have permission to create projects",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "A date before the current one was provided in the 'closeDate' field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "The close date should be later than or equal to the current date"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all projects",
        "description": "Retrieve a list of all projects",
        "tags": ["Projects"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page the user wants to see its related results",
            "default": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Quantity of records the user wants to see per page",
            "default": 10,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all created projects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/paginatedProjects"
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}": {
      "get": {
        "summary": "Get a specific project",
        "description": "Show the data of a specific project",
        "tags": ["Projects"],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data for the provided project id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdProject"
                }
              }
            }
          },
          "404": {
            "description": "The provided project id does not correspond to any project identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No project with the informed id was found"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a specific project",
        "description": "Update one or more fields of a specific project",
        "tags": ["Projects"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the project that should be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/updatedProject"
              },
              "examples": {
                "Valid body": {
                  "value": {
                    "name": "Project XPTO"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdProject"
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "examples": {
                  "Value with invalid property": {
                    "value": {
                      "name": ["Expected string, received number"]
                    }
                  },
                  "No field provided for update": {
                    "value": {
                      "message": "No valid field was provided for update"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "The user is not allowed to update projects or is trying to update a project that was created by other user",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "A date before the current one was provided in the 'closeDate' field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "The close date should be later than or equal to the current date"
                }
              }
            }
          },
          "404": {
            "description": "The provided project id does not correspond to any project identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                }
              },
              "example": {
                "message": "No project with the informed id was found"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a project by id",
        "description": "Delete the project's record whose id was provided",
        "tags": ["Projects"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the project",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Project deleted successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "The user is not an admin and is trying to delete a project created by other user",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No project record with the provided id was found in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No project with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/projects/vacancySubscriptions/open": {
      "get": {
        "summary": "Get open projects",
        "description": "Show all the projects whose â€˜closeDateâ€™ field has a date later than the current one, meaning that the project's subscriptions are still open",
        "tags": ["Projects"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page the user wants to see its related results",
            "default": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Quantity of records the user wants to see per page",
            "default": 10,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of open projects available for subscriptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/paginatedProjects"
                }
              }
            }
          }
        }
      }
    },
    "/projects/unfinished": {
      "get": {
        "summary": "Get open projects",
        "description": "Show all the projects that don't have the finished status",
        "tags": ["Projects"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page the user wants to see its related results",
            "default": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Quantity of records the user wants to see per page",
            "default": 10,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of projects that don't have the finished status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/paginatedProjects"
                }
              }
            }
          }
        }
      }
    },
    "/projects/selectionMethod/{selectionMethod}": {
      "get": {
        "summary": "Get projects by member selection method",
        "description": "Shows all projects whose member selection method is equal to the specified one",
        "tags": ["Projects"],
        "parameters": [
          {
            "name": "selectionMethod",
            "in": "path",
            "description": "The way the users are selected for the project's vacancies",
            "schema": {
              "type": "string",
              "enum": ["AleatÃ³ria", "Ordem de inscriÃ§Ã£o", "SeleÃ§Ã£o manual"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page the user wants to see its related results",
            "default": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Quantity of records the user wants to see per page",
            "default": 10,
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of projects whose member selection method is equal to the specified one",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/paginatedProjects"
                }
              }
            }
          },
          "404": {
            "description": "The value provided is not one of the available member selection methods",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "Member selection method not found, the values available are: AleatÃ³ria, Ordem de inscriÃ§Ã£o e Escolha manual"
                }
              }
            }
          }
        }
      }
    },
    "/projects/users/{createdById}": {
      "get": {
        "summary": "Get projects by creator",
        "description": "Show all the projects created by the user whose id was specified",
        "tags": ["Projects"],
        "parameters": [
          {
            "name": "createdById",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page the user wants to see its related results",
            "default": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Quantity of records the user wants to see per page",
            "default": 10,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of projects created by the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/paginatedProjects"
                }
              }
            }
          },
          "404": {
            "description": "The provided user id does not correspond to any user identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No user with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/projects/search/{value}": {
      "get": {
        "summary": "Searches projects by a value",
        "description": "Shows the data of all projects that have the searched value in their description or name fields",
        "tags": ["Projects"],
        "parameters": [
          {
            "name": "value",
            "in": "path",
            "description": "Searched value",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page the user wants to see its related results",
            "default": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Quantity of records the user wants to see per page",
            "default": 10,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of projects that have the searched value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/paginatedProjects"
                }
              }
            }
          }
        }
      }
    },
    "/questions": {
      "post": {
        "summary": "Create a new question",
        "tags": ["Questions"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/newQuestion"
              },
              "example": {
                "question": "Qual Ã© a diferenÃ§a entre HTML e HTML5?",
                "technologyId": 1,
                "difficultyLevel": 2
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Question created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdQuestion"
                },
                "example": {
                  "id": 1,
                  "question": "Qual Ã© a diferenÃ§a entre HTML e HTML5?",
                  "technologyId": 1,
                  "difficultyLevel": 2
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "examples": {
                  "Invalid body": {
                    "value": {
                      "question": ["Expected string, received number"],
                      "technologyId": ["required"]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "Users that are not admins can't create questions",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided technology id does not correspond to any technology identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No technology with the informed id was found"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all questions",
        "tags": ["Questions"],
        "responses": {
          "200": {
            "description": "List of all questions in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/questionWithAnswers"
                },
                "example": [
                  {
                    "id": 19,
                    "question": "What is HTML?",
                    "technologyId": 5,
                    "difficultyLevel": 3
                  },
                  {
                    "id": 23,
                    "question": "What is CSS?",
                    "technologyId": 3,
                    "difficultyLevel": 1
                  }
                ]
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "The user is not allowed to see questions data",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/questions/{id}": {
      "get": {
        "summary": "Get question by id",
        "description": "Retrieve the data of a specific question by id",
        "tags": ["Questions"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the question to be shown",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data of the question's record whose id was provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/questionWithTechnology"
                },
                "example": {
                  "id": 18,
                  "question": "What is JavaScript?",
                  "technologyId": 3,
                  "difficultyLevel": 2,
                  "technology": {
                    "id": 3,
                    "name": "JavaScript",
                    "iconUrl": "https://img.icons8.com/ios/150/javascript--v1.png"
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "The user is not allowed to see questions data",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided question id does not correspond to any question identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No question with the informed id was found"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update question by id",
        "description": "Update one or more fields of a specific question",
        "tags": ["Questions"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the question that should be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/updatedQuestion"
              },
              "example": {
                "difficultyLevel": 1
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "The format of the body properties is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "examples": {
                  "Invalid body": {
                    "value": {
                      "question": ["Expected string, received number"]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "Users that are not admins can't update questions",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided technology id does not correspond to any technology identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Invalid question id": {
                    "description": "The question being updated doesn't exist",
                    "value": {
                      "message": "No question with the informed id was found"
                    }
                  },
                  "Invalid technology id": {
                    "description": "The id of the technology that was provided for update doesn't exist",
                    "value": {
                      "message": "No technology with the informed id was found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete question by id",
        "tags": ["Questions"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the question to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Question deleted successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "A user that is not admin can not delete questions",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided question id does not correspond to any question identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No question with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/questions/technologies/{technologyId}": {
      "get": {
        "summary": "Get questions by technology id",
        "description": "Returns a list with all the questions related to the specified technology",
        "tags": ["Questions"],
        "parameters": [
          {
            "name": "technologyId",
            "in": "path",
            "description": "Id of the technology",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All the questions related to the technology",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/questionWithTechnology"
                  }
                },
                "example": [
                  {
                    "id": 18,
                    "question": "What is JavaScript?",
                    "technologyId": 3,
                    "difficultyLevel": 2,
                    "technology": {
                      "id": 3,
                      "name": "JavaScript",
                      "iconUrl": "https://img.icons8.com/ios/150/javascript--v1.png"
                    }
                  }
                ]
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "The user is not allowed to see questions data",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided technology id does not correspond to any technology identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No technology with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/questions/random/technologies/{technologyId}": {
      "get": {
        "summary": "Get random questions by technology id",
        "description": "Returns a list, with a maximum of 10 random questions related to the specified technology, each question associated with its respective answer",
        "tags": ["Questions"],
        "parameters": [
          {
            "name": "technologyId",
            "in": "path",
            "description": "Id of the technology for which random questions should be obtained",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of random questions for the specified technology",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/questionWithAnswers"
                },
                "example": [
                  {
                    "id": 19,
                    "question": "What is JavaScript?",
                    "technologyId": 3,
                    "difficultyLevel": 1,
                    "answers": [
                      {
                        "id": 8,
                        "answer": "Answer 3",
                        "questionId": 19
                      },
                      {
                        "id": 6,
                        "answer": "Answer 1",
                        "questionId": 19
                      },
                      {
                        "id": 7,
                        "answer": "Answer 2",
                        "questionId": 19
                      }
                    ]
                  },
                  {
                    "id": 20,
                    "question": "What is CSS?",
                    "technologyId": 3,
                    "difficultyLevel": 3,
                    "answers": [
                      {
                        "id": 9,
                        "answer": "Answer 1",
                        "questionId": 20
                      }
                    ]
                  }
                ]
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "The user is not allowed to see questions data",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided technology id does not correspond to any technology identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No technology with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/rankings/vacancies/participations": {
      "get": {
        "summary": "Display users in order of the number of vacancies they've been selected for",
        "tags": ["Rankings"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page the user wants to see its related results",
            "default": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Quantity of records the user wants to see per page",
            "default": 10,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List the users' information along with the frequency of their participation as candidates for vacancies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/paginatedParticipationRanking"
                },
                "example": {
                  "page": 0,
                  "quantity": 2,
                  "rankings": [
                    {
                      "applicationsCount": 5,
                      "id": 1,
                      "userId": 1,
                      "firstName": "John",
                      "lastName": "Doe",
                      "profilePicture": "https://example.com/johndoe.jpg"
                    },
                    {
                      "applicationsCount": 3,
                      "id": 2,
                      "userId": 2,
                      "firstName": "Emily",
                      "lastName": "Smith",
                      "profilePicture": "https://example.com/emilysmith.jpg"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/rankings/ratings/authored": {
      "get": {
        "summary": "Display users in order of the number of ratings they've created",
        "tags": ["Rankings"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page the user wants to see its related results",
            "default": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Quantity of records the user wants to see per page",
            "default": 10,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List the users' information along with the number of ratings created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/paginatedRatingsMadeRanking"
                },
                "example": {
                  "page": 0,
                  "quantity": 2,
                  "rankings": [
                    {
                      "ratingsMadeCount": 5,
                      "id": 1,
                      "userId": 1,
                      "firstName": "John",
                      "lastName": "Doe",
                      "profilePicture": "https://example.com/johndoe.jpg"
                    },
                    {
                      "ratingsMadeCount": 3,
                      "id": 2,
                      "userId": 2,
                      "firstName": "Emily",
                      "lastName": "Smith",
                      "profilePicture": "https://example.com/emilysmith.jpg"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/rankings/ratings/average": {
      "get": {
        "summary": "Display users in order of the average score of ratings they've received",
        "tags": ["Rankings"],
        "responses": {
          "200": {
            "description": "List the users' information along with the average score",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/paginatedRatingsAverageRanking"
                },
                "example": {
                  "page": 0,
                  "quantity": 2,
                  "rankings": [
                    {
                      "averageRating": 5,
                      "userId": 1,
                      "firstName": "John",
                      "lastName": "Doe",
                      "profilePicture": "https://example.com/johndoe.jpg"
                    },
                    {
                      "averageRating": 3,
                      "userId": 2,
                      "firstName": "Emily",
                      "lastName": "Smith",
                      "profilePicture": "https://example.com/emilysmith.jpg"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/rankings/learners/subscriptions": {
      "get": {
        "summary": "Display users in order of the number of learner's subscriptions they have made",
        "tags": ["Rankings"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page the user wants to see its related results",
            "default": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Quantity of records the user wants to see per page",
            "default": 10,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List the users' information along with the number of learner's subscriptions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/paginatedSubscriptionsRanking"
                },
                "example": {
                  "page": 0,
                  "quantity": 2,
                  "rankings": [
                    {
                      "learnerSubscriptionsCount": 5,
                      "userId": 1,
                      "firstName": "John",
                      "lastName": "Doe",
                      "profilePicture": "https://example.com/johndoe.jpg"
                    },
                    {
                      "learnerSubscriptionsCount": 3,
                      "userId": 2,
                      "firstName": "Emily",
                      "lastName": "Smith",
                      "profilePicture": "https://example.com/emilysmith.jpg"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/rankings/tests/scores": {
      "get": {
        "summary": "Display users in order of the total sum of their test scores",
        "tags": ["Rankings"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page the user wants to see its related results",
            "default": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Quantity of records the user wants to see per page",
            "default": 10,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List the users' information along with the tests' scores",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/paginatedTestScoreRanking"
                },
                "example": {
                  "page": 0,
                  "quantity": 2,
                  "rankings": [
                    {
                      "totalTestsScore": 40.0,
                      "userId": 1,
                      "firstName": "John",
                      "lastName": "Doe",
                      "profilePicture": "https://example.com/johndoe.jpg"
                    },
                    {
                      "totalTestsScore": 15.0,
                      "userId": 2,
                      "firstName": "Emily",
                      "lastName": "Smith",
                      "profilePicture": "https://example.com/emilysmith.jpg"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/rankings/userSkills/scores": {
      "get": {
        "summary": "Display users in order of the total sum of their skill scores",
        "tags": ["Rankings"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page the user wants to see its related results",
            "default": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Quantity of records the user wants to see per page",
            "default": 10,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List the users' information along with their total skills' scores",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/paginatedSkillScoreRanking"
                },
                "example": {
                  "page": 0,
                  "quantity": 2,
                  "rankings": [
                    {
                      "total": 2500,
                      "userId": 1,
                      "firstName": "John",
                      "lastName": "Doe",
                      "profilePicture": "https://example.com/johndoe.jpg",
                      "technologyName": "Node JS"
                    },
                    {
                      "skillScore": 40.0,
                      "userId": 2,
                      "firstName": "Emily",
                      "lastName": "Smith",
                      "profilePicture": "https://example.com/emilysmith.jpg",
                      "technologyName": "HTML"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/ratings": {
      "post": {
        "summary": "Create a new rating",
        "tags": ["Ratings"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/newRating"
              },
              "example": {
                "comment": "Good team work!",
                "grade": 5,
                "ratedRecipientId": 2,
                "projectId": 2
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rating created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdRating"
                },
                "example": {
                  "id": 2,
                  "comment": "Good team work!",
                  "grade": 5,
                  "authorId": 3,
                  "ratedRecipientId": 2,
                  "createdDate": "2023-12-27T05:20:46.289Z",
                  "projectId": 2
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "examples": {
                  "Invalid body": {
                    "value": {
                      "grade": ["Expected number, received boolean"],
                      "ratedRecipientId": ["required"]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "User is trying to rate himself": {
                    "description": "The user tried to create a rating for himself, but a user can only rate other project colleague",
                    "value": {
                      "message": "A user cannot rate himself"
                    }
                  },
                  "Rated user is not a project colleague": {
                    "description": "A user canâ€™t rate others with whom they havenâ€™t worked, they can only rate colleagues from the specified project",
                    "value": {
                      "message": "A user is unable to rate a user they haven't collaborated with on the specified project"
                    }
                  },
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "Users that don't have permission can't create ratings",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided user id does not correspond to any user identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Rated recipient not found": {
                    "value": {
                      "message": "No user with the informed id was found"
                    }
                  },
                  "Author not found": {
                    "value": {
                      "message": "No user with the informed id was found"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "A user can only create one rating every 15 days for the same individual within the same project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "This user has already rated the same user for this project within the last fifteen days"
                }
              }
            }
          }
        }
      }
    },
    "/ratings/made/{authorId}": {
      "get": {
        "summary": "Display user's created ratings",
        "description": "Shows all the ratings created by a specific user for other users",
        "tags": ["Ratings"],
        "parameters": [
          {
            "name": "authorId",
            "in": "path",
            "description": "Id of the user whose ratings made by himself should be shown",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page the user wants to see its related results",
            "default": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Quantity of records the user wants to see per page",
            "default": 10,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ratings created by the user with the provided id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/paginatedRatings"
                },
                "example": {
                  "page": 0,
                  "quantity": 2,
                  "ratings": [
                    {
                      "id": 1,
                      "comment": "Good team work!",
                      "grade": 5,
                      "authorId": 3,
                      "ratedRecipientId": 2,
                      "createdDate": "2023-12-27T05:20:46.289Z",
                      "projectId": 2
                    },
                    {
                      "id": 2,
                      "comment": "Poor team work!",
                      "grade": 1,
                      "authorId": 3,
                      "ratedRecipientId": 1,
                      "createdDate": "2023-11-11T05:20:46.289Z",
                      "projectId": 4
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The provided author id id does not correspond to any user identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No user with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/ratings/received/{ratedRecipientId}": {
      "get": {
        "summary": "Display user's received ratings",
        "description": "Shows all the ratings received by a specific user made by other users",
        "tags": ["Ratings"],
        "parameters": [
          {
            "name": "ratedRecipientId",
            "in": "path",
            "description": "Id of the user whose ratings received by himself should be shown",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page the user wants to see its related results",
            "default": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Quantity of records the user wants to see per page",
            "default": 10,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Ratings received by the user with the provided id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/paginatedRatings"
                },
                "example": {
                  "page": 0,
                  "quantity": 2,
                  "ratings": [
                    {
                      "id": 9,
                      "comment": "Amazing design skills!",
                      "grade": 5,
                      "authorId": 1,
                      "ratedRecipientId": 2,
                      "createdDate": "2024-01-02T03:18:23.289Z",
                      "projectId": 2
                    },
                    {
                      "id": 10,
                      "comment": "You helped me a lot!",
                      "grade": 5,
                      "authorId": 4,
                      "ratedRecipientId": 2,
                      "createdDate": "2024-01-05T00:14:12.289Z",
                      "projectId": 4
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The provided recipient id id does not correspond to any user identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No user with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/ratings/average/{ratedRecipientId}": {
      "get": {
        "summary": "User's average rating score",
        "description": "Shows the average score of the ratings received by the user",
        "tags": ["Ratings"],
        "parameters": [
          {
            "name": "ratedRecipientId",
            "in": "path",
            "description": "Id of the user whose average rating should be shown",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Average score of the ratings received by the user with the provided id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ratingScore"
                  }
                },
                "example": { "averageRating": 8.5 }
              }
            }
          },
          "404": {
            "description": "The provided recipient id id does not correspond to any user identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No user with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/ratings/{id}": {
      "patch": {
        "summary": "Update a rating",
        "tags": ["Ratings"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the rating to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/updatedRating"
              },
              "example": {
                "grade": 5
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rating updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdRating"
                },
                "example": {
                  "id": 2,
                  "comment": "Good team work!",
                  "grade": 5,
                  "authorId": 3,
                  "ratedRecipientId": 2,
                  "createdDate": "2023-12-27T05:20:46.289Z",
                  "projectId": 2
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "examples": {
                  "Invalid body": {
                    "value": {
                      "grade": ["Expected number, received boolean"]
                    }
                  },
                  "No field provided for update": {
                    "value": {
                      "message": "No valid field was provided for update"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Updating other user's rating": {
                    "description": "The user tried to update a rating created by other user",
                    "value": {
                      "message": "A user cannot change ratings from other users"
                    }
                  },
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "Users that don't have permission can't update ratings",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided rating id does not correspond to any rating identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No rating with the informed id was found"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a rating",
        "tags": ["Ratings"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the rating to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Rating deleted successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Deleting other user's rating": {
                    "description": "The user tried to delete a rating created by other user",
                    "value": {
                      "message": "A user cannot change ratings from other users"
                    }
                  },
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "Users that don't have permission can't delete ratings",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided rating id does not correspond to any rating identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No rating with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/technologies": {
      "post": {
        "summary": "Create a new technology",
        "tags": ["Technologies"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/newTechnology"
              },
              "example": {
                "name": "CSS",
                "iconUrl": "https://css.png"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Technology created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdTechnology"
                },
                "example": {
                  "id": 1,
                  "name": "CSS",
                  "iconUrl": "https://css.png"
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "examples": {
                  "Invalid body": {
                    "value": {
                      "name": ["required"]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "A user that is not admin can not create technologies",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "A technology name should be unique, it can't have the same name of an already existent one",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "A technology with this name was already created"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all technologies",
        "tags": ["Technologies"],
        "responses": {
          "200": {
            "description": "List of all technologies in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/questionWithAnswers"
                },
                "example": [
                  {
                    "id": 1,
                    "name": "CSS",
                    "iconUrl": "https://css.png"
                  },
                  {
                    "id": 2,
                    "name": "JavaScript",
                    "iconUrl": "https://javascript.png"
                  }
                ]
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "The user is not allowed to see technologies data",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/technologies/{id}": {
      "get": {
        "summary": "Get a specific technology",
        "description": "Show the information for the technology with the provided id",
        "produces": ["application/json"],
        "tags": ["Technologies"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the technology that should be shown",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data for the provided technology id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdTechnology"
                },
                "example": {
                  "id": 1,
                  "name": "CSS",
                  "iconUrl": "https://css.png"
                }
              }
            }
          },
          "404": {
            "description": "The provided technology id does not correspond to any technology identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No technology with the informed id was found"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "The user is not allowed to see technologies data",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a specific technology",
        "description": "Update one or more fields of a specific technology",
        "produces": ["application/json"],
        "tags": ["Technologies"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the technology that should be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/createdTechnology"
              },
              "examples": {
                "Valid body": {
                  "value": {
                    "id": 1,
                    "name": "CSS",
                    "iconUrl": "https://css.png"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The technology was updated with success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdTechnology"
                },
                "example": {
                  "id": 1,
                  "name": "CSS",
                  "iconUrl": "https://css.png"
                }
              }
            }
          },
          "400": {
            "description": "The format of one or more values being updated is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "examples": {
                  "Invalid body": {
                    "value": {
                      "iconUrl": ["Expected string, received number"]
                    }
                  },
                  "No field provided for update": {
                    "value": {
                      "message": "No valid field was provided for update"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "A user that is not admin can not update technologies",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided technology id does not correspond to any technology identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No technology with the informed id was found"
                }
              }
            }
          },
          "409": {
            "description": "A technology name should be unique, it can't have the same name of an already existent one",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "A technology with this name was already created"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a specific technology",
        "description": "",
        "produces": ["application/json"],
        "tags": ["Technologies"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the technology that should be deleted",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The technology was deleted with success"
          },
          "404": {
            "description": "The provided technology id does not correspond to any technology identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No technology with the informed id was found"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "A user that is not admin can not delete technologies",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tests/evaluate": {
      "post": {
        "summary": "Evaluate answers and get test score",
        "description": "Check if each question id is related to the correct answer id",
        "produces": ["application/json"],
        "tags": ["Tests"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/testAnswer"
                }
              },
              "example": [
                {
                  "questionId": 26,
                  "answerId": 13
                },
                {
                  "questionId": 25,
                  "answerId": 14
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "Test score calculated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdTest"
                },
                "example": {
                  "createdTest": {
                    "id": 70,
                    "userId": 2,
                    "technologyId": 6,
                    "score": 200,
                    "createdDate": "2024-01-10T09:26:53.944Z"
                  },
                  "isBiggestScore": true
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodErrorMessageList"
                },
                "examples": {
                  "Invalid body": {
                    "description": "One or more answers are missing required properties, or the format of their values is incorrect",
                    "value": [
                      {
                        "0": ["Required"],
                        "1": ["Expected number, received string"]
                      }
                    ]
                  },
                  "Answer id or question id not found": {
                    "description": "Answer id or question id provided in one or more objects are incorrect",
                    "value": [
                      {
                        "0": [
                          "No question with the informed id was found",
                          "No answer with the informed id was found"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "A question id cannot be repeated more than once or be related to more than one answer id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "The question(s) with id(s) 1, 2 were answered more than once"
                }
              }
            }
          }
        }
      }
    },
    "/tests/{id}": {
      "get": {
        "summary": "Get test by id",
        "description": "Retrieve details of a specific test by its id",
        "produces": ["application/json"],
        "tags": ["Tests"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the test to retrieve",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the requested test",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdTest"
                },
                "example": {
                  "id": 70,
                  "userId": 2,
                  "technologyId": 6,
                  "score": 200,
                  "createdDate": "2024-01-10T09:26:53.944Z"
                }
              }
            }
          },
          "404": {
            "description": "Test id not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No test with the informed id was found"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tests/technologies/{technologyId}": {
      "get": {
        "summary": "Get tests by technology id",
        "description": "Retrieve tests related to a specific technology",
        "produces": ["application/json"],
        "tags": ["Tests"],
        "parameters": [
          {
            "name": "technologyId",
            "in": "path",
            "description": "Id of the technology to retrieve tests",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tests related to the technology",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdTest"
                  }
                },
                "example": [
                  {
                    "id": 54,
                    "userId": 1,
                    "technologyId": 3,
                    "score": 700,
                    "createdDate": "2024-01-03T00:14:58.031Z"
                  },
                  {
                    "id": 55,
                    "userId": 1,
                    "technologyId": 3,
                    "score": 1000,
                    "createdDate": "2024-01-03T00:16:13.391Z"
                  },
                  {
                    "id": 56,
                    "userId": 1,
                    "technologyId": 3,
                    "score": 1000,
                    "createdDate": "2024-01-03T00:16:29.230Z"
                  }
                ]
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tests/users/{userId}": {
      "get": {
        "summary": "Get tests by user id",
        "description": "Retrieve tests made by a specific user",
        "produces": ["application/json"],
        "tags": ["Tests"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user to retrieve tests",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tests related to the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdTest"
                  }
                },
                "example": [
                  {
                    "id": 67,
                    "userId": 1,
                    "technologyId": 6,
                    "score": 500,
                    "createdDate": "2024-01-03T02:00:56.860Z"
                  },
                  {
                    "id": 62,
                    "userId": 1,
                    "technologyId": 6,
                    "score": 300,
                    "createdDate": "2024-01-03T00:22:40.675Z"
                  },
                  {
                    "id": 70,
                    "userId": 2,
                    "technologyId": 6,
                    "score": 200,
                    "createdDate": "2024-01-10T09:26:53.944Z"
                  }
                ]
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tests/users/{userId}/technologies/{technologyId}": {
      "get": {
        "summary": "Get test by user id and technology id",
        "description": "Get the test made by the user with the given id about the technology with the specified id",
        "produces": ["application/json"],
        "tags": ["Tests"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "technologyId",
            "in": "path",
            "description": "Id of the technology",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tests related to the user and technology",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdTest"
                  },
                  "example": [
                    {
                      "id": 67,
                      "userId": 1,
                      "technologyId": 6,
                      "score": 500,
                      "createdDate": "2024-01-03T02:00:56.860Z"
                    },
                    {
                      "id": 62,
                      "userId": 1,
                      "technologyId": 6,
                      "score": 300,
                      "createdDate": "2024-01-03T00:22:40.675Z"
                    },
                    {
                      "id": 70,
                      "userId": 1,
                      "technologyId": 6,
                      "score": 200,
                      "createdDate": "2024-01-10T09:26:53.944Z"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Get all users",
        "description": "Retrieve a list of all users",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page the user wants to see its related results",
            "default": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Quantity of records the user wants to see per page",
            "default": 10,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all users",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/paginatedUsers"
                },
                "example": {
                  "page": 0,
                  "quantity": 1,
                  "users": [
                    {
                      "id": 103,
                      "username": "NewUser",
                      "firstName": "NewName",
                      "lastName": "NewLastName",
                      "email": "newuser@example.com",
                      "githubUsername": "newuser",
                      "linkedinUrl": "https://www.linkedin.com/in/newuser/",
                      "password": "password456",
                      "roleId": 1,
                      "deletedDate": null
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "description": "Create a new user with the provided information",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/definitions/newUser" },
              "example": {
                "username": "NewUser",
                "firstName": "NewName",
                "lastName": "NewLastName",
                "email": "newuser@example.com",
                "githubUsername": "newuser",
                "linkedinUrl": "https://www.linkedin.com/in/newuser/",
                "password": "password456",
                "roleId": 1
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/definitions/createdUser" },
                "example": {
                  "id": 103,
                  "username": "NewUser",
                  "firstName": "NewName",
                  "lastName": "NewLastName",
                  "email": "newuser@example.com",
                  "githubUsername": "newuser",
                  "linkedinUrl": "https://www.linkedin.com/in/newuser/",
                  "password": "password456",
                  "roleId": 1,
                  "deletedDate": null
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "example": {
                  "email": ["Expected string, received number"]
                }
              }
            }
          },
          "404": {
            "description": "The provided role id does not correspond to any role identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No role with the informed id was found"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Username in use": {
                    "description": "The provided username was already related to an existent user",
                    "value": {
                      "message": "An existent user already has this username"
                    }
                  },
                  "Email in use": {
                    "description": "The provided email was already related to an existent user",
                    "value": {
                      "message": "An existent user already has this email"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/logged": {
      "get": {
        "summary": "Get logged-in user",
        "description": "Retrieve information about the user whose token was provided",
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "Logged-in user information",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/definitions/createdUser" },
                "example": {
                  "id": 103,
                  "username": "NewUser",
                  "firstName": "NewName",
                  "lastName": "NewLastName",
                  "email": "newuser@example.com",
                  "githubUsername": "newuser",
                  "linkedinUrl": "https://www.linkedin.com/in/newuser/",
                  "password": "password456",
                  "roleId": 1,
                  "deletedDate": null
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/search/{value}": {
      "get": {
        "summary": "Search users by a value",
        "description": "Shows the data of all users that have the searched value in their username, firstname, lastname, email and/or github username fields",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "The value to search for"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page the user wants to see its related results",
            "default": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Quantity of records the user wants to see per page",
            "default": 10,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of users matching the search criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/paginatedUsers"
                },
                "example": {
                  "page": 0,
                  "quantity": 1,
                  "users": [
                    {
                      "id": 103,
                      "username": "NewUser",
                      "firstName": "NewName",
                      "lastName": "NewLastName",
                      "email": "newuser@example.com",
                      "githubUsername": "newuser",
                      "linkedinUrl": "https://www.linkedin.com/in/newuser/",
                      "password": "password456",
                      "roleId": 1,
                      "deletedDate": null
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Get user by id",
        "description": "Show the user's record whose id was provided",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Id of the user to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "User information with the provided id",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/definitions/createdUser" },
                "example": {
                  "id": 103,
                  "username": "NewUser",
                  "firstName": "NewName",
                  "lastName": "NewLastName",
                  "email": "newuser@example.com",
                  "githubUsername": "newuser",
                  "linkedinUrl": "https://www.linkedin.com/in/newuser/",
                  "password": "password456",
                  "roleId": 1,
                  "deletedDate": null
                }
              }
            }
          },
          "404": {
            "description": "The provided user id does not correspond to any user identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No user with the informed id was found"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update user by id",
        "description": "Update one or more fields of a specific user",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Id of the user to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/definitions/updatedUser" },
              "example": {
                "firstName": "NewName",
                "lastName": "NewLastName"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/definitions/createdUser" },
                "example": {
                  "id": 103,
                  "username": "NewUser",
                  "firstName": "NewName",
                  "lastName": "NewLastName",
                  "email": "newuser@example.com",
                  "githubUsername": "newuser",
                  "linkedinUrl": "https://www.linkedin.com/in/newuser/",
                  "password": "password456",
                  "roleId": 1,
                  "deletedDate": null
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "examples": {
                  "Invalid body": {
                    "value": {
                      "firstName": ["Expected string, received number"]
                    }
                  },
                  "No field provided for update": {
                    "value": {
                      "message": "No valid field was provided for update"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "Only a admin or the user itself can update his info",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided user id does not correspond to any user identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "User not found": {
                    "value": {
                      "message": "No user with the informed id was found"
                    }
                  },
                  "Role not found": {
                    "value": {
                      "message": "No role with the informed id was found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user by id",
        "description": "Delete the user whose id was provided",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Id of the user to delete"
          }
        ],
        "responses": {
          "204": { "description": "User deleted successfully" },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "Only a admin or the user with the provided id can delete himself",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided user id does not correspond to any user identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No user with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "summary": "User login",
        "description": "Authenticate and login a user, returning a token that can be used in routes that require authentication",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/definitions/loggedUser" },
              "example": {
                "email": "newuser@example.com",
                "password": "password456"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/definitions/userLogin" },
                "example": {
                  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImxhYWhjb2xsaW5zMTZAZ21haWwuY29tIiwiaWF0IjoxNzA0ODY4MDAxLCJleHAiOjE3MDQ5NTQ0MDEsInN1YiI6ImxhYWhjb2xsaW5zMTZAZ21haWwuY29tIn0.N1EVxjhwcPosBIcgjIEa5I2O0eR6AaT6NzU25Iblsdo"
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "example": { "email": ["Expected string, received number"] }
              }
            }
          }
        }
      }
    },
    "/userSkills/users/{userId}": {
      "get": {
        "summary": "Get user skills by user id",
        "description": "Shows the technologies skills of the specified user",
        "tags": ["User skills"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user whose skills should be shown",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of the skills the user has",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdUserSkill"
                  }
                },
                "example": [
                  {
                    "id": 12,
                    "userId": 1,
                    "technologyId": 5,
                    "skillLevel": "IntermediÃ¡rio",
                    "score": 2000
                  },
                  {
                    "id": 13,
                    "userId": 1,
                    "technologyId": 1,
                    "skillLevel": "BÃ¡sico",
                    "score": 1000
                  }
                ]
              }
            }
          },
          "404": {
            "description": "The provided user id does not correspond to any user identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No user with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/userSkills/skillLevel/{skillLevel}": {
      "get": {
        "summary": "Get user skills by user id",
        "description": "Shows the technologies skills of the specified user",
        "tags": ["User skills"],
        "parameters": [
          {
            "name": "skillLevel",
            "in": "path",
            "description": "Skill level of the skills that should be shown",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["BÃ¡sico", "IntermediÃ¡rio", "AvanÃ§ado"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all the user skills that have the provided skill level",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdUserSkill"
                  }
                },
                "example": [
                  {
                    "id": 1,
                    "userId": 4,
                    "technologyId": 5,
                    "skillLevel": "BÃ¡sico",
                    "score": 1200
                  },
                  {
                    "id": 13,
                    "userId": 1,
                    "technologyId": 1,
                    "skillLevel": "BÃ¡sico",
                    "score": 1000
                  }
                ]
              }
            }
          },
          "404": {
            "description": "The provided skill level is invalid, one of these values should be used: BÃ¡sico, IntermediÃ¡rio, AvanÃ§ado",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "Skill level not found, the values available are: BÃ¡sico, IntermediÃ¡rio, AvanÃ§ado"
                }
              }
            }
          }
        }
      }
    },
    "/userSkills/technologies/{technologyId}": {
      "get": {
        "summary": "Get user skills by technology id",
        "description": "Shows the user skills that are related to the specified technology",
        "tags": ["User skills"],
        "parameters": [
          {
            "name": "technologyId",
            "in": "path",
            "description": "Id of the technology that should be related with the user skills shown",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of the skills related to the technology",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdUserSkill"
                  }
                },
                "example": [
                  {
                    "id": 12,
                    "userId": 1,
                    "technologyId": 5,
                    "skillLevel": "IntermediÃ¡rio",
                    "score": 2000
                  },
                  {
                    "id": 4,
                    "userId": 2,
                    "technologyId": 5,
                    "skillLevel": "BÃ¡sico",
                    "score": 1000
                  }
                ]
              }
            }
          },
          "404": {
            "description": "The provided technology id does not correspond to any technology identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No technology with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/userSkills/{id}": {
      "get": {
        "summary": "Get user skill by id",
        "description": "Shows the user skill with the specified id",
        "tags": ["User skills"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the user skill that should have its data shown",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data for the provided user skill id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdUserSkill"
                },
                "example": {
                  "id": 12,
                  "userId": 1,
                  "technologyId": 5,
                  "skillLevel": "IntermediÃ¡rio",
                  "score": 2000
                }
              }
            }
          },
          "404": {
            "description": "The provided user skill id does not correspond to any user skill identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No user skill with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/vacancies": {
      "get": {
        "summary": "Get all vacancies",
        "description": "Displays all the vacancies created across all projects on the platform",
        "tags": ["Vacancies"],
        "responses": {
          "200": {
            "description": "List of all vacancies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/createdVacancy" }
                },
                "example": [
                  {
                    "id": 78,
                    "name": "Testador AutomÃ¡tico",
                    "description": "Realizar testes automatizados para garantir a qualidade do software.",
                    "createdDate": "2023-10-02T15:20:10.123Z",
                    "learnersLimit": 2,
                    "projectId": 3,
                    "chosenCandidateId": null,
                    "project": {
                      "id": 3,
                      "name": "AutoTestHub",
                      "description": "Plataforma dedicada a testes automatizados para garantir a qualidade do software.",
                      "createdById": 5,
                      "createdDate": "2023-09-28T09:45:30.456Z",
                      "deletedDate": null,
                      "closeDate": "2024-07-15T00:00:00.000Z",
                      "repositoryUrl": "https://github.com/AutoTestHub/testing-platform",
                      "memberSelectionMethod": "AleatÃ³ria",
                      "status": "NÃ£o iniciado"
                    }
                  },
                  {
                    "id": 92,
                    "name": "Desenvolvedor Full Stack",
                    "description": "Contribuir para o desenvolvimento de aplicaÃ§Ãµes web completas, do frontend ao backend.",
                    "createdDate": "2023-11-18T12:55:45.789Z",
                    "learnersLimit": 3,
                    "projectId": 6,
                    "chosenCandidateId": null,
                    "project": {
                      "id": 6,
                      "name": "WebSolutions",
                      "description": "Desenvolvimento colaborativo de soluÃ§Ãµes web inovadoras.",
                      "createdById": 8,
                      "createdDate": "2023-11-10T17:30:00.000Z",
                      "deletedDate": null,
                      "closeDate": "2024-08-20T00:00:00.000Z",
                      "repositoryUrl": "https://github.com/WebSolutions/innovative-web-apps",
                      "memberSelectionMethod": "Ordem de inscriÃ§Ã£o",
                      "status": "NÃ£o iniciado"
                    }
                  },
                  {
                    "id": 105,
                    "name": "Cientista de Dados",
                    "description": "Analisar dados para extrair insights valiosos em um projeto colaborativo de ciÃªncia de dados.",
                    "createdDate": "2023-12-05T18:10:15.234Z",
                    "learnersLimit": 1,
                    "projectId": 4,
                    "chosenCandidateId": null,
                    "project": {
                      "id": 4,
                      "name": "DataScienceLab",
                      "description": "ColaboraÃ§Ã£o em pesquisa e aplicaÃ§Ã£o de tÃ©cnicas avanÃ§adas de ciÃªncia de dados.",
                      "createdById": 6,
                      "createdDate": "2023-11-30T08:00:00.000Z",
                      "deletedDate": null,
                      "closeDate": "2024-09-25T00:00:00.000Z",
                      "repositoryUrl": "https://github.com/DataScienceLab/advanced-data-analysis",
                      "memberSelectionMethod": "Escolha manual",
                      "status": "NÃ£o iniciado"
                    }
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new vacancy",
        "description": "Create a new vacancy that will be available for users to apply for in the project it is related to",
        "tags": ["Vacancies"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/definitions/newVacancy" },
              "example": {
                "name": "Cientista de Dados",
                "description": "Analisar dados para extrair insights valiosos em um projeto colaborativo de ciÃªncia de dados.",
                "learnersLimit": 1,
                "projectId": 4
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vacancy created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdVacancyWithoutProject"
                },
                "example": {
                  "id": 105,
                  "name": "Cientista de Dados",
                  "description": "Analisar dados para extrair insights valiosos em um projeto colaborativo de ciÃªncia de dados.",
                  "createdDate": "2023-12-05T18:10:15.234Z",
                  "learnersLimit": 1,
                  "projectId": 4,
                  "chosenCandidateId": null
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "example": {
                  "name": ["Expected string, received number"]
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Candidate not found": {
                    "description": "The provided candidate id does not correspond to any user identifier in the database",
                    "value": {
                      "message": "No candidate with the informed id was found"
                    }
                  },
                  "Project not found": {
                    "description": "The provided project id does not correspond to any project identifier in the database",
                    "value": {
                      "message": "No project with the informed id was found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "The user doesn't have permission to create vacancies",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The project to which the vacancy is being related has already reached its 'closeDate', therefore, it can't be linked to any new vacancies",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "It's not possible to associate or modify a vacancy from a project that has already been closed"
                }
              }
            }
          },
          "429": {
            "description": "The 'chosenCandidateId' field has been linked to a user who has reached the limit of being associated with a maximum of 3 vacancies simultaneously",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "The user has already reached the limit of 3 open projects that he can join simultaneously"
                }
              }
            }
          }
        }
      }
    },
    "/vacancies/{id}": {
      "get": {
        "summary": "Get vacancy by id",
        "description": "Shows the vacancy with the specified id",
        "tags": ["Vacancies"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the vacancy that should have its data shown",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data for the provided vacancy id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdVacancy"
                },
                "example": {
                  "id": 78,
                  "name": "Testador AutomÃ¡tico",
                  "description": "Realizar testes automatizados para garantir a qualidade do software.",
                  "createdDate": "2023-10-02T15:20:10.123Z",
                  "learnersLimit": 2,
                  "projectId": 3,
                  "chosenCandidateId": null
                }
              }
            }
          },
          "404": {
            "description": "The provided vacancy id does not correspond to any vacancy identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No vacancy with the informed id was found"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a vacancy",
        "description": "Update one or more fields of a specific vacancy",
        "tags": ["Vacancies"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the vacancy that should be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/definitions/updatedVacancy" },
              "example": {
                "learnersLimit": 10
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vacancy updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/definitions/createdVacancy" },
                "example": {
                  "id": 105,
                  "name": "Cientista de Dados",
                  "description": "Analisar dados para extrair insights valiosos em um projeto colaborativo de ciÃªncia de dados.",
                  "createdDate": "2023-12-05T18:10:15.234Z",
                  "learnersLimit": 10,
                  "projectId": 4,
                  "chosenCandidateId": null
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "examples": {
                  "Value with invalid property": {
                    "description": "The format of one or more values being updated is incorrect",
                    "value": {
                      "description": ["Expected string, received number"]
                    }
                  },
                  "No field provided for update": {
                    "description": "The request body is empty",
                    "value": {
                      "message": "No valid field was provided for update"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Vacancy not found": {
                    "description": "The provided vacancy id does not correspond to any vacancy identifier in the database",
                    "value": {
                      "message": "No vacancy with the informed id was found"
                    }
                  },
                  "Candidate not found": {
                    "description": "The provided candidate id does not correspond to any user identifier in the database",
                    "value": {
                      "message": "No candidate with the informed id was found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "Only a admin or the user that owns the related project can update the vacancy",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "The new id in the 'chosenCandidateId' field is equal to the previous value; the user is the same, and it should be different",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "The new chosen candidate is the same as the old one"
                }
              }
            }
          },
          "429": {
            "description": "The 'chosenCandidateId' field was filled, and the user with whom it is related has reached the limit of being associated with a maximum of 3 vacancies simultaneously",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "The user has already reached the limit of 3 open projects that he can join simultaneously"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a vacancy",
        "description": "Delete the vacancy's record whose id was provided",
        "tags": ["Vacancies"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the vacancy that should be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Vacancy successfully deleted"
          },
          "404": {
            "description": "The provided vacancy id does not correspond to any vacancy identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No vacancy with the informed id was found"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "Only a admin or the user that owns the related project can delete the vacancy",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "A vacancy can't be deleted if its 'chosenCandidateId' field is filled, a user is related to the vacancy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "It's not possible to delete the vacancy because it is already associated with a chosen user"
                }
              }
            }
          }
        }
      }
    },
    "/vacancies/giveup/{id}": {
      "patch": {
        "summary": "Give up from vacancy",
        "description": "The chosen user, whose id is in the 'chosenCandidateId' field, can give up from the vacancy. By doing so, this field is set to null, and the vacancy is no longer associated with the user",
        "tags": ["Vacancies"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the vacancy from which the user wants to give up",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The user has successfully give up from the vacancy. As a result, the number of dropouts is increased, counting the number of vacancies the user has given up",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/definitions/vacancyDropout" },
                "example": {
                  "dropoutData": {
                    "vacancyDropoutsNumber": 1
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided vacancy id does not correspond to any vacancy identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No vacancy with the informed id was found"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User can't give up from vacancy": {
                    "description": "Only the chosen user whose id is associated with the vacancy can give up from it, the id of the user whose token was provided is not equal to the chosen candidate id",
                    "value": {
                      "message": "Only the chosen user can give up from the associated vacancy"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "The user can't give up from a vacancy if its related project is already finished",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "It's not possible to associate or modify a vacancy from a project that has already been finished"
                }
              }
            }
          }
        }
      }
    },
    "/vacancies/projects/open": {
      "get": {
        "summary": "Get all vacancies related to open projects",
        "description": "Displays all the vacancies related to projects that have a 'closeDate' later than the current date",
        "tags": ["Vacancies"],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "Page the user wants to see its related results",
            "default": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Quantity of records the user wants to see per page",
            "default": 10,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all vacancies related to open projects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/paginatedVacancies"
                },
                "example": {
                  "page": 0,
                  "quantity": 3,
                  "vacancies": [
                    {
                      "id": 78,
                      "name": "Testador AutomÃ¡tico",
                      "description": "Realizar testes automatizados para garantir a qualidade do software.",
                      "createdDate": "2023-10-02T15:20:10.123Z",
                      "learnersLimit": 2,
                      "projectId": 3,
                      "chosenCandidateId": null,
                      "project": {
                        "id": 3,
                        "name": "AutoTestHub",
                        "description": "Plataforma dedicada a testes automatizados para garantir a qualidade do software.",
                        "createdById": 5,
                        "createdDate": "2023-09-28T09:45:30.456Z",
                        "deletedDate": null,
                        "closeDate": "2024-07-15T00:00:00.000Z",
                        "repositoryUrl": "https://github.com/AutoTestHub/testing-platform",
                        "memberSelectionMethod": "AleatÃ³ria",
                        "status": "NÃ£o iniciado"
                      }
                    },
                    {
                      "id": 92,
                      "name": "Desenvolvedor Full Stack",
                      "description": "Contribuir para o desenvolvimento de aplicaÃ§Ãµes web completas, do frontend ao backend.",
                      "createdDate": "2023-11-18T12:55:45.789Z",
                      "learnersLimit": 3,
                      "projectId": 6,
                      "chosenCandidateId": null,
                      "project": {
                        "id": 6,
                        "name": "WebSolutions",
                        "description": "Desenvolvimento colaborativo de soluÃ§Ãµes web inovadoras.",
                        "createdById": 8,
                        "createdDate": "2023-11-10T17:30:00.000Z",
                        "deletedDate": null,
                        "closeDate": "2024-08-20T00:00:00.000Z",
                        "repositoryUrl": "https://github.com/WebSolutions/innovative-web-apps",
                        "memberSelectionMethod": "Ordem de inscriÃ§Ã£o",
                        "status": "NÃ£o iniciado"
                      }
                    },
                    {
                      "id": 105,
                      "name": "Cientista de Dados",
                      "description": "Analisar dados para extrair insights valiosos em um projeto colaborativo de ciÃªncia de dados.",
                      "createdDate": "2023-12-05T18:10:15.234Z",
                      "learnersLimit": 1,
                      "projectId": 4,
                      "chosenCandidateId": null,
                      "project": {
                        "id": 4,
                        "name": "DataScienceLab",
                        "description": "ColaboraÃ§Ã£o em pesquisa e aplicaÃ§Ã£o de tÃ©cnicas avanÃ§adas de ciÃªncia de dados.",
                        "createdById": 6,
                        "createdDate": "2023-11-30T08:00:00.000Z",
                        "deletedDate": null,
                        "closeDate": "2024-09-25T00:00:00.000Z",
                        "repositoryUrl": "https://github.com/DataScienceLab/advanced-data-analysis",
                        "memberSelectionMethod": "Escolha manual",
                        "status": "NÃ£o iniciado"
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/vacancies/projects/{projectId}": {
      "get": {
        "summary": "Get vacancies by project id",
        "description": "Shows all the vacancies related to the specified project",
        "tags": ["Vacancies"],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Id of the project that should have its related vacancies shown",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All vancancies related to the project",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdVacancy"
                  }
                },
                "example": [
                  {
                    "id": 78,
                    "name": "Testador AutomÃ¡tico",
                    "description": "Realizar testes automatizados para garantir a qualidade do software.",
                    "createdDate": "2023-10-02T15:20:10.123Z",
                    "learnersLimit": 2,
                    "projectId": 3,
                    "chosenCandidateId": null
                  },
                  {
                    "id": 79,
                    "name": "Desenvolvedor Backend",
                    "description": "Desenvolver o backend da plataforma.",
                    "createdDate": "2023-10-02T15:20:15.123Z",
                    "learnersLimit": 5,
                    "projectId": 3,
                    "chosenCandidateId": null
                  },
                  {
                    "id": 80,
                    "name": "Business Analyst",
                    "description": "Levantar os requisitos do sistema.",
                    "createdDate": "2023-10-02T15:20:18.123Z",
                    "learnersLimit": 2,
                    "projectId": 3,
                    "chosenCandidateId": 3
                  }
                ]
              }
            }
          },
          "404": {
            "description": "The provided project id does not correspond to any project identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No project with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/vacancies/unrelated/projects/{projectId}": {
      "get": {
        "summary": "Get vacancies with no chosen candidate by project id",
        "description": "Shows all the vacancies related to the specified project that are not linked to any candidate/user",
        "tags": ["Vacancies"],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Id of the project that should have its vacancies shown",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All vacancies related to the project that don't have any chosen candidate",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdVacancy"
                  }
                },
                "example": [
                  {
                    "id": 78,
                    "name": "Testador AutomÃ¡tico",
                    "description": "Realizar testes automatizados para garantir a qualidade do software.",
                    "createdDate": "2023-10-02T15:20:10.123Z",
                    "learnersLimit": 2,
                    "projectId": 3,
                    "chosenCandidateId": null
                  },
                  {
                    "id": 70,
                    "name": "Desenvolvedor Backend",
                    "description": "Desenvolver o backend da plataforma.",
                    "createdDate": "2023-10-02T15:20:15.123Z",
                    "learnersLimit": 5,
                    "projectId": 3,
                    "chosenCandidateId": null
                  }
                ]
              }
            }
          },
          "404": {
            "description": "The provided project id does not correspond to any project identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No project with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/vacancies/users/{userId}": {
      "get": {
        "summary": "Get vacancies by user id",
        "description": "Shows all the vacancies linked to the specified user id in the 'chosenCandidateId' field",
        "tags": ["Vacancies"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user that should be a chosen candidate in the vacancies shown",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page the user wants to see its related results",
            "default": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Quantity of records the user wants to see per page",
            "default": 10,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All vacancies related to the specified user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/paginatedVacancies"
                },
                "example": {
                  "page": 0,
                  "quantity": 2,
                  "vacancies": [
                    {
                      "id": 78,
                      "name": "Testador AutomÃ¡tico",
                      "description": "Realizar testes automatizados para garantir a qualidade do software.",
                      "createdDate": "2023-10-02T15:20:10.123Z",
                      "learnersLimit": 2,
                      "projectId": 3,
                      "chosenCandidateId": 1,
                      "project": {
                        "id": 3,
                        "name": "AutoTestHub",
                        "description": "Plataforma dedicada a testes automatizados para garantir a qualidade do software.",
                        "createdById": 5,
                        "createdDate": "2023-09-28T09:45:30.456Z",
                        "deletedDate": null,
                        "closeDate": "2024-07-15T00:00:00.000Z",
                        "repositoryUrl": "https://github.com/AutoTestHub/testing-platform",
                        "memberSelectionMethod": "AleatÃ³ria",
                        "status": "NÃ£o iniciado"
                      }
                    },
                    {
                      "id": 92,
                      "name": "Desenvolvedor Full Stack",
                      "description": "Contribuir para o desenvolvimento de aplicaÃ§Ãµes web completas, do frontend ao backend.",
                      "createdDate": "2023-11-18T12:55:45.789Z",
                      "learnersLimit": 3,
                      "projectId": 6,
                      "chosenCandidateId": 1,
                      "project": {
                        "id": 6,
                        "name": "WebSolutions",
                        "description": "Desenvolvimento colaborativo de soluÃ§Ãµes web inovadoras.",
                        "createdById": 8,
                        "createdDate": "2023-11-10T17:30:00.000Z",
                        "deletedDate": null,
                        "closeDate": "2024-08-20T00:00:00.000Z",
                        "repositoryUrl": "https://github.com/WebSolutions/innovative-web-apps",
                        "memberSelectionMethod": "Ordem de inscriÃ§Ã£o",
                        "status": "NÃ£o iniciado"
                      }
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "description": "The provided candidate id does not correspond to any user identifier in the database",
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No candidate with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/vacancies/projects/{projectId}/users/{userId}": {
      "get": {
        "summary": "Get vacancies by project and user ids",
        "description": "Shows all the vacancies related to the specified project that are linked to the specified user id in the 'chosenCandidateId' field",
        "tags": ["Vacancies"],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Id of the project that should have its vacancies shown",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user that should be a chosen candidate in the vacancies shown",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All vacancies related to the specified project and user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdVacancy"
                  }
                },
                "example": [
                  {
                    "id": 78,
                    "name": "Testador AutomÃ¡tico",
                    "description": "Realizar testes automatizados para garantir a qualidade do software.",
                    "createdDate": "2023-10-02T15:20:10.123Z",
                    "learnersLimit": 2,
                    "projectId": 3,
                    "chosenCandidateId": 1
                  },
                  {
                    "id": 70,
                    "name": "Desenvolvedor Backend",
                    "description": "Desenvolver o backend da plataforma.",
                    "createdDate": "2023-10-02T15:20:15.123Z",
                    "learnersLimit": 5,
                    "projectId": 3,
                    "chosenCandidateId": 1
                  }
                ]
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "No project found": {
                    "description": "The provided project id does not correspond to any project identifier in the database",
                    "value": {
                      "message": "No project with the informed id was found"
                    }
                  },
                  "No candidate found": {
                    "description": "The provided candidate id does not correspond to any user identifier in the database",
                    "value": {
                      "message": "No candidate with the informed id was found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vacancies/available/users/{userId}": {
      "get": {
        "summary": "Get vacancies available for user application",
        "description": "Displays all vacancies for which the user meets the requirements to create a subscription",
        "tags": ["Vacancies"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user for whom all available vacancies for application should be displayed",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page the user wants to see its related results",
            "default": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Quantity of records the user wants to see per page",
            "default": 10,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All vacancies for which the user is able to candidate",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/paginatedVacanciesWithProjectData"
                },
                "example": {
                  "page": 0,
                  "quantity": 3,
                  "vacancies": [
                    {
                      "id": 123,
                      "name": "Desenvolvedor Full Stack",
                      "description": "DescriÃ§Ã£o do desenvolvedor Full Stack",
                      "createdDate": "2024-01-12T15:30:00.000Z",
                      "learnersLimit": 3,
                      "projectId": 456,
                      "chosenCandidateId": null,
                      "projectName": "Projeto OpenAI",
                      "projectDescription": "Projeto para explorar tecnologias da OpenAI",
                      "projectCloseDate": "2024-05-30T00:00:00.000Z",
                      "projectMemberSelectionMethod": "AleatÃ³ria",
                      "projectStatus": "NÃ£o iniciado"
                    },
                    {
                      "id": 789,
                      "name": "Desenvolvedor Backend",
                      "description": "DescriÃ§Ã£o do desenvolvedor Backend",
                      "createdDate": "2024-01-15T12:45:00.000Z",
                      "learnersLimit": 5,
                      "projectId": 101,
                      "chosenCandidateId": 234,
                      "projectName": "Projeto ChatGPT",
                      "projectDescription": "Projeto para integrar ChatGPT em uma aplicaÃ§Ã£o",
                      "projectCloseDate": "2024-06-15T00:00:00.000Z",
                      "projectMemberSelectionMethod": "Ordem de inscriÃ§Ã£o",
                      "projectStatus": "Em andamento"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "description": "The provided candidate id does not correspond to any user identifier in the database",
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No candidate with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/vacancies/projects/{projectId}/isMember": {
      "get": {
        "summary": "Get boolean value indicating if the user is a project member",
        "description": "Indicates if the user who is logged is a member of the project whose id was provided",
        "tags": ["Vacancies"],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Id of the project that we will be checked to see if the logged user is a member",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/projectMember"
                }
              }
            }
          }
        }
      }
    },
    "/vacancyRequirements": {
      "post": {
        "summary": "Create a new vacancy requirement",
        "description": "Create a new requirement to specify which skills the user should have to be able to candidate to the related vacancy",
        "tags": ["Vacancy requirements"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/definitions/newVacancyRequirement" },
              "example": {
                "vacancyId": 34,
                "technologyId": 3,
                "skillLevel": "BÃ¡sico"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vacancy requirement created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdVacancyRequirement"
                },
                "example": {
                  "id": 1,
                  "vacancyId": 34,
                  "technologyId": 3,
                  "skillLevel": "BÃ¡sico",
                  "skillLevelScore": 0
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "example": {
                  "vacancyId": ["Expected number, received string"],
                  "technologyId": ["required"]
                }
              }
            }
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Technology not found": {
                    "description": "The provided technology id does not correspond to any technology identifier in the database",
                    "value": {
                      "message": "No technology with the informed id was found"
                    }
                  },
                  "Vacancy not found": {
                    "description": "The provided vacancy id does not correspond to any vacancy identifier in the database",
                    "value": {
                      "message": "No vacancy with the informed id was found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "Only a admin and the user who created the vacancy's project are able to create requirements for its related vacancies",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "A requirement was already created with the provided technology id and related to this vacancy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "This technology is already related to the provided vacancy"
                }
              }
            }
          },
          "429": {
            "description": "It's not possible to create a new requirement for a vacancy that already has user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "Unable to perform operation. The vacancy is already linked to an user"
                }
              }
            }
          }
        }
      }
    },
    "/vacancyRequirements/{id}": {
      "get": {
        "summary": "Get vacancy requirement by id",
        "description": "Shows the data of the vacancy requirement whose id was provided",
        "tags": ["Vacancy requirements"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the vacancy requirement to be shown",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found vacancy requirement data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdVacancyRequirement"
                },
                "example": {
                  "id": 15,
                  "vacancyId": 34,
                  "technologyId": 3,
                  "skillLevel": "BÃ¡sico",
                  "skillLevelScore": 0
                }
              }
            }
          },
          "404": {
            "description": "The provided vacancy requirement id does not correspond to any vacancy requirement identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No vacancy requirement with the informed id was found"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a vacancy requirement",
        "description": "Update one or more fields of a specific vacancy requirement",
        "tags": ["Vacancy requirements"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the vacancy requirement that should be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/definitions/updatedVacancyRequirement" },
              "example": {
                "skillLevel": "AvanÃ§ado"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Vacancy requirement updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/definitions/createdVacancy" },
                "example": {
                  "id": 15,
                  "vacancyId": 34,
                  "technologyId": 3,
                  "skillLevel": "IntermediÃ¡rio",
                  "skillLevelScore": 1000
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "examples": {
                  "Value with invalid property": {
                    "description": "The value or format of one or more values being updated are incorrect",
                    "value": {
                      "skillLevel": [
                        "Invalid enum value. Expected 'BÃ¡sico' | 'IntermediÃ¡rio' | 'AvanÃ§ado', received 'Invalid value'"
                      ]
                    }
                  },
                  "No field provided for update": {
                    "description": "The request body is empty",
                    "value": {
                      "message": "No valid field was provided for update"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided technology id does not correspond to any technology identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No technology with the informed id was found"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "Only a admin and the user who created the vacancy's project are able to update requirements for its related vacancies",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "A requirement was already created with the provided technology id to which the requirement is being updated, and it's already associated with this vacancy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "This technology is already related to the provided vacancy"
                }
              }
            }
          },
          "429": {
            "description": "It's not possible to update a requirement of a vacancy that is already related to an user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "Unable to perform operation. The vacancy is already linked to an user"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a vacancy requirement",
        "description": "Delete the vacancy requirement's record whose id was provided",
        "tags": ["Vacancy requirements"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the vacancy requirement to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Vacancy requirement successfully deleted"
          },
          "404": {
            "description": "The provided vacancy requirement id does not correspond to any vacancy requirement identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No vacancy requirement with the informed id was found"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "Only a admin and the user who created the vacancy's project are able to delete its related vacancies' requirements",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "It's not possible to delete a requirement of a vacancy that is already related to an user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "Unable to perform operation. The vacancy is already linked to an user"
                }
              }
            }
          }
        }
      }
    },
    "/vacancyRequirements/vacancies/{vacancyId}": {
      "get": {
        "summary": "Get vacancy's requirements",
        "description": "Displays all requirements that a user should have to candidate to the vacancy whose id was provided",
        "tags": ["Vacancy requirements"],
        "parameters": [
          {
            "name": "vacancyId",
            "in": "path",
            "description": "Id of the vacancy for whom all related requirements should be displayed",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All related vacancy's requirements",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdVacancyRequirement"
                  }
                },
                "example": [
                  {
                    "id": 15,
                    "vacancyId": 34,
                    "technologyId": 3,
                    "skillLevel": "BÃ¡sico",
                    "skillLevelScore": 0
                  },
                  {
                    "id": 16,
                    "vacancyId": 34,
                    "technologyId": 2,
                    "skillLevel": "IntermediÃ¡rio",
                    "skillLevelScore": 1000
                  }
                ]
              }
            }
          },
          "404": {
            "description": "The provided vacancy id does not correspond to any vacancy identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No vacancy with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/vacancySubscriptions": {
      "post": {
        "summary": "Create a new vacancy subscriptions",
        "description": "The user whose token has been sent creates a new subscription to apply for a specific vacancy in a project",
        "tags": ["Vacancy subscriptions"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/definitions/newVacancySubscription" },
              "example": {
                "vacancyId": 34
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vacancy subscription created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdVacancySubscription"
                },
                "example": {
                  "id": 1,
                  "userId": 3,
                  "vacancyId": 34,
                  "createdDate": "2024-01-09T16:07:39.017Z"
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "example": {
                  "vacancyId": ["Expected number, received string"]
                }
              }
            }
          },
          "403": {
            "description": "After giving up from 3 vacancies where he was the chosen candidate, the user is blocked from applying to others for a period of 30 days.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "The user is restricted from applying to vacancies due to a previous withdrawal. They can only register again starting from this date: 11/02/2024"
                }
              }
            }
          },
          "404": {
            "description": "The provided vacancy id does not correspond to any vacancy identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No vacancy with the informed id was found"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "The user doesn't have permission to create vacancy subscriptions",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Vacancy already has chosen user": {
                    "description": "It's not possible to candidate for a vacancy that is already related to a chosen user",
                    "value": {
                      "message": "Vacancy is already assigned to a candidate"
                    }
                  },
                  "Duplicated subscription": {
                    "description": "This user already created a subscription for this vacancy before and can't create another",
                    "value": {
                      "message": "This user already created a subscription to this vacancy"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "User doesn't meet the requirements": {
                    "description": "The user can't candidate for a vacancy because he doesn't meet the skill level requirements for the vacancy's technologies",
                    "value": {
                      "message": "The user can't apply to this vacancy because he doesn't meet the vacancy's requirements"
                    }
                  },
                  "User reached vacancy's limit": {
                    "description": "The user can't apply for another vacancy because he have already reached the limit of 3 vacancies that he can join simultaneously",
                    "value": {
                      "message": "The user has already reached the limit of 3 open projects that he can join simultaneously"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vacancySubscriptions/{id}": {
      "get": {
        "summary": "Get vacancy subscription by id",
        "description": "Shows the data of the vacancy subscription whose id was provided",
        "tags": ["Vacancy subscriptions"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the vacancy subscription to be shown",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found vacancy subscription data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdVacancySubscription"
                },
                "example": {
                  "id": 78,
                  "userId": 3,
                  "vacancyId": 30,
                  "createdDate": "2024-01-12T05:27:06.013Z"
                }
              }
            }
          },
          "404": {
            "description": "The provided vacancy subscription id does not correspond to any vacancy subscription identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No vacancy subscription with the informed id was found"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a vacancy subscription",
        "description": "Delete the vacancy subscription's record whose id was provided",
        "tags": ["Vacancy subscriptions"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the vacancy subscription to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Vacancy subscription successfully deleted"
          },
          "404": {
            "description": "The provided vacancy subscription id does not correspond to any vacancy subscription identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No vacancy subscription with the informed id was found"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "Only a admin and the user who created the vacancy subscription are able to delete it",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vacancySubscriptions/vacancies/{vacancyId}": {
      "get": {
        "summary": "Get vacancy subscription by vacancy id",
        "description": "Shows the data from all subscriptions for the vacancy whose id was provided",
        "tags": ["Vacancy subscriptions"],
        "parameters": [
          {
            "name": "vacancyId",
            "in": "path",
            "description": "Id of the vacancy for which the related subscriptions should be displayed",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page the user wants to see its related results",
            "default": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Quantity of records the user wants to see per page",
            "default": 10,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All the subscriptions related to the vacancy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/paginatedSubscriptions"
                },
                "example": {
                  "page": 0,
                  "quantity": 2,
                  "vacancySubscriptions": [
                    {
                      "id": 45,
                      "userId": 3,
                      "vacancyId": 25,
                      "createdDate": "2024-01-12T05:27:06.013Z"
                    },
                    {
                      "id": 48,
                      "userId": 1,
                      "vacancyId": 25,
                      "createdDate": "2024-01-10T03:12:09.013Z"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The provided vacancy id does not correspond to any vacancy identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No vacancy with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/vacancySubscriptions/users/{userId}": {
      "get": {
        "summary": "Get vacancy subscription by user id",
        "description": "Shows all the subscriptions made by the user whose id was provided",
        "tags": ["Vacancy subscriptions"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user for which the related subscriptions should be displayed",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page the user wants to see its related results",
            "default": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "quantity",
            "in": "query",
            "description": "Quantity of records the user wants to see per page",
            "default": 10,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Vacancy subscriptions related to the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/paginatedSubscriptions"
                },
                "example": {
                  "page": 0,
                  "quantity": 2,
                  "vacancySubscriptions": [
                    {
                      "id": 45,
                      "userId": 3,
                      "vacancyId": 25,
                      "createdDate": "2024-01-12T05:27:06.013Z"
                    },
                    {
                      "id": 50,
                      "userId": 3,
                      "vacancyId": 22,
                      "createdDate": "2024-01-10T03:12:09.013Z"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "The provided user id does not correspond to any user identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No user with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/votations": {
      "post": {
        "summary": "Create a new votation",
        "description": "Starts a votation to ban the related vacancy's chosen candidate",
        "tags": ["Votations"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/definitions/newVotation" },
              "example": {
                "vacancyId": 34
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Votation created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdVotation"
                },
                "example": {
                  "id": 7,
                  "vacancyId": 41,
                  "isOpen": true
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "example": {
                  "vacancyId": ["Expected number, received string"]
                }
              }
            }
          },
          "404": {
            "description": "The provided vacancy id does not correspond to any vacancy identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No vacancy with the informed id was found"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User is not project creator": {
                    "description": "Users that are not the project's owner can not open votations to ban other users",
                    "value": {
                      "message": "Only the project creator can manage votations"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/votations/projects/{projectId}": {
      "get": {
        "summary": "Get votations by project id",
        "description": "Shows all the open votations related to the project's vacancies whose id was provided",
        "tags": ["Votations"],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Id of the project whose related votations should be displayed",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All the votations related to the project's vacancies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdVotation"
                  }
                },
                "example": [
                  {
                    "id": 7,
                    "vacancyId": 41,
                    "isOpen": true
                  },
                  {
                    "id": 8,
                    "vacancyId": 24,
                    "isOpen": true
                  }
                ]
              }
            }
          },
          "404": {
            "description": "The provided project id does not correspond to any project identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No project with the informed id was found"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User is not project creator": {
                    "description": "A user that is not a project member can't see the open project's votations",
                    "value": {
                      "message": "Only project members can see the open votations"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/votations/{votationId}": {
      "delete": {
        "summary": "Delete votation by id",
        "description": "Deletes the votation whose id was specified",
        "tags": ["Votations"],
        "parameters": [
          {
            "name": "votationId",
            "in": "path",
            "description": "Id of the votation that should be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Votation deleted successfully"
          },
          "404": {
            "description": "The provided votation id does not correspond to any votation identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No votation with the informed id was found"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User is not project creator": {
                    "description": "A user who is not the owner of the project to which the votation is related cannot delete votations",
                    "value": {
                      "message": "Only the project creator can manage votations"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/votes": {
      "post": {
        "summary": "Create a new vote",
        "description": "Add a vote from the logged-in user in a specific votation",
        "tags": ["Votes"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/definitions/newVote" },
              "example": {
                "votationId": 34
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Vote created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdVote"
                },
                "example": {
                  "id": 14,
                  "votationId": 6,
                  "voterId": 3,
                  "wasUserBanned": true
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "example": {
                  "votationId": ["Expected number, received string"]
                }
              }
            }
          },
          "404": {
            "description": "The provided votation id does not correspond to any votation identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No votation with the informed id was found"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User is not project colleague": {
                    "description": "A user can only vote if the chosen candidate for the vacancy being voted is a project colleague of the logged-in user",
                    "value": {
                      "message": "A user can only vote for another user if both are members of the same project"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "A user can't create more than one vote per votation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "Users can only vote once per votation"
                }
              }
            }
          }
        }
      }
    },
    "/votes/votations/{votationId}": {
      "get": {
        "summary": "Get votes by votation id",
        "description": "Shows all the votes in a specific votation",
        "tags": ["Votes"],
        "parameters": [
          {
            "name": "votationId",
            "in": "path",
            "description": "Id of the votation whose related votes should be displayed",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All the votes related to the votation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdVote"
                  }
                },
                "example": [
                  {
                    "id": 1,
                    "votationId": 6,
                    "voterId": 3,
                    "wasUserBanned": true
                  },
                  {
                    "id": 2,
                    "votationId": 6,
                    "voterId": 2,
                    "wasUserBanned": false
                  }
                ]
              }
            }
          },
          "404": {
            "description": "The provided votation id does not correspond to any votation identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No votation with the informed id was found"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/votes/{voteId}": {
      "delete": {
        "summary": "Delete vote by id",
        "description": "Deletes the vote whose id was specified",
        "tags": ["Votes"],
        "parameters": [
          {
            "name": "voteId",
            "in": "path",
            "description": "Id of the vote that should be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Vote deleted successfully"
          },
          "404": {
            "description": "The provided vote id does not correspond to any vote identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No vote with the informed id was found"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User is not project creator": {
                    "description": "Only the user who voted can delete its vote",
                    "value": {
                      "message": "A user can't delete votes from other users"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "newAnswer": {
      "type": "object",
      "properties": {
        "answer": {
          "type": "string",
          "description": "One of the possible question's answers",
          "required": true
        },
        "questionId": {
          "type": "number",
          "description": "The id of the question to which the answer is related",
          "required": true
        },
        "isRight": {
          "type": "boolean",
          "description": "Indicates if it's the question's right answer",
          "required": true
        }
      }
    },
    "updatedAnswer": {
      "type": "object",
      "properties": {
        "answer": {
          "type": "string",
          "description": "One of the possible question's answers"
        },
        "isRight": {
          "type": "boolean",
          "description": "Indicates if it's the question's right answer"
        }
      }
    },
    "createdAnswer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "description": "Id of the created answer",
          "example": 1
        },
        "answer": {
          "type": "string",
          "description": "One of the possible question's answers",
          "example": "HTML defines the structure of a web page",
          "required": true
        },
        "questionId": {
          "type": "number",
          "description": "The id of the question to which the answer is related",
          "example": 1,
          "required": true
        },
        "isRight": {
          "type": "boolean",
          "description": "Indicates if it's the question's right answer",
          "defalut": false,
          "example": true,
          "required": true
        }
      }
    },
    "newLearner": {
      "type": "object",
      "properties": {
        "vacancyId": {
          "type": "number",
          "description": "Id of the vacancy to which the learner is applying to learn its related technologies with the vacancy's chosen candidate",
          "required": true
        }
      }
    },
    "createdLearner": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "description": "Id of the created learner",
          "example": 27,
          "required": true
        },
        "vacancyId": {
          "type": "number",
          "description": "Id of the vacancy for which the user applied as a learner",
          "example": 34,
          "required": true
        },
        "candidateId": {
          "type": "number",
          "description": "Id of user who applied to be a learner",
          "example": 3,
          "required": true
        },
        "createdDate": {
          "type": "string",
          "description": "Date when the user became a learner of this vacancy",
          "example": "2023-12-31T19:54:06.490Z",
          "required": true
        }
      }
    },
    "newProject": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the project",
          "example": "Project ABC",
          "required": true
        },
        "description": {
          "type": "string",
          "description": "Details about the purpose of the project and what is it about",
          "example": "A description of Project ABC",
          "required": true
        },
        "closeDate": {
          "type": "string",
          "format": "date-time",
          "description": "When the project will no longer accept candidatures/subscriptions for its vacancies",
          "example": "2024-01-31T00:00:00Z",
          "required": true
        },
        "repositoryUrl": {
          "type": "string",
          "description": "URL of the project's repository that contains its code",
          "example": "https://github.com/project_abc"
        },
        "memberSelectionMethod": {
          "type": "string",
          "description": "Method of selecting project members for vacancies related to the project",
          "enum": ["AleatÃ³ria", "Ordem de inscriÃ§Ã£o", "SeleÃ§Ã£o manual"],
          "example": "AleatÃ³ria",
          "required": true
        }
      }
    },
    "updatedProject": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the project",
          "example": "Project ABC"
        },
        "description": {
          "type": "string",
          "description": "Details about the purpose of the project and what is it about",
          "example": "A description of Project ABC"
        },
        "closeDate": {
          "type": "string",
          "format": "date-time",
          "description": "When the project will no longer accept candidatures/subscriptions for its vacancies",
          "example": "2024-01-31T00:00:00Z"
        },
        "repositoryUrl": {
          "type": "string",
          "description": "URL of the project's repository that contains its code",
          "example": "https://github.com/project_abc"
        },
        "memberSelectionMethod": {
          "type": "string",
          "description": "Method of selecting project members for vacancies related to the project",
          "enum": ["AleatÃ³ria", "Ordem de inscriÃ§Ã£o", "SeleÃ§Ã£o manual"],
          "example": "AleatÃ³ria"
        },
        "status": {
          "type": "string",
          "description": "Indicates if the project started or not",
          "enum": ["NÃ£o iniciado", "Em progresso", "Finalizado"],
          "example": "Em progresso"
        }
      }
    },
    "createdProject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "description": "ID of the created project",
          "example": 1
        },
        "name": {
          "type": "string",
          "description": "Name of the project",
          "example": "Project ABC"
        },
        "description": {
          "type": "string",
          "description": "Details about the purpose of the project and what is it about",
          "example": "A description of Project ABC"
        },
        "createdById": {
          "type": "number",
          "description": "ID of the creator of the project",
          "example": 123
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "When the project was created",
          "example": "2024-01-01T00:00:00Z"
        },
        "closeDate": {
          "type": "string",
          "format": "date-time",
          "description": "When the project will no longer accept candidatures/subscriptions for its vacancies",
          "example": "2024-01-31T00:00:00Z"
        },
        "repositoryUrl": {
          "type": "string",
          "description": "URL of the project's repository that contains its code",
          "example": "https://github.com/project_abc"
        },
        "memberSelectionMethod": {
          "type": "string",
          "description": "Method of selecting project members for vacancies related to the project",
          "enum": ["AleatÃ³ria", "Ordem de inscriÃ§Ã£o", "SeleÃ§Ã£o manual"],
          "example": "AleatÃ³ria"
        },
        "status": {
          "type": "string",
          "description": "Indicates if the project started or not",
          "enum": ["NÃ£o iniciado", "Em progresso", "Finalizado"],
          "example": "NÃ£o iniciado"
        }
      }
    },
    "newQuestion": {
      "type": "object",
      "properties": {
        "question": {
          "type": "string",
          "description": "The question text"
        },
        "technologyId": {
          "type": "integer",
          "description": "Technology the question is about"
        },
        "difficultyLevel": {
          "type": "integer",
          "description": "Difficulty level of the question (1-3)",
          "enum": [1, 2, 3]
        }
      },
      "required": ["question", "technologyId", "difficultyLevel"]
    },
    "createdQuestion": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The id of the created question"
        },
        "question": {
          "type": "string",
          "description": "The question text"
        },
        "technologyId": {
          "type": "integer",
          "description": "Technology the question is about"
        },
        "difficultyLevel": {
          "type": "integer",
          "description": "Difficulty level of the question (1-3)",
          "enum": [1, 2, 3]
        }
      },
      "required": ["question", "technologyId", "difficultyLevel"]
    },
    "updatedQuestion": {
      "type": "object",
      "properties": {
        "question": {
          "type": "string",
          "description": "The updated question text"
        },
        "technologyId": {
          "type": "integer",
          "description": "Technology the question is about"
        },
        "difficultyLevel": {
          "type": "integer",
          "description": "The updated difficulty level of the question (1-3)",
          "enum": [1, 2, 3]
        }
      }
    },
    "questionWithTechnology": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The ID of the question"
        },
        "question": {
          "type": "string",
          "description": "The question text"
        },
        "technologyId": {
          "type": "integer",
          "description": "Technology the question is about"
        },
        "difficultyLevel": {
          "type": "integer",
          "description": "Difficulty level of the question (1-3)",
          "enum": [1, 2, 3]
        },
        "technology": {
          "description": "Details of the technology the question is about",
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The ID of the technology"
            },
            "name": {
              "type": "string",
              "description": "The name of the technology"
            },
            "iconUrl": {
              "type": "string",
              "description": "The URL to the technology's logo image"
            }
          }
        }
      }
    },
    "questionWithAnswers": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the question"
          },
          "question": {
            "type": "string",
            "description": "The question text"
          },
          "technologyId": {
            "type": "integer",
            "description": "Technology the question is about"
          },
          "difficultyLevel": {
            "type": "integer",
            "description": "The difficulty level of the question (1-3)",
            "enum": [1, 2, 3]
          },
          "answers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The ID of the answer"
                },
                "answer": {
                  "type": "string",
                  "description": "The answer text"
                },
                "questionId": {
                  "type": "integer",
                  "description": "Id of the question the answer belongs to"
                }
              }
            }
          }
        }
      }
    },
    "participationRanking": {
      "type": "object",
      "properties": {
        "applicationsCount": {
          "description": "How many times the user was selected as the chosen candidate in vacancies",
          "type": "integer"
        },
        "userId": {
          "type": "integer"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "profilePicture": {
          "description": "User's loaded profile picture data",
          "type": "string"
        }
      }
    },
    "ratingsMadeRanking": {
      "type": "object",
      "properties": {
        "ratingsMadeCount": {
          "description": "How many times the user rated other users",
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "userId": {
          "type": "integer"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "profilePicture": {
          "description": "User's loaded profile picture data",
          "type": "string"
        }
      }
    },
    "ratingsAverageRanking": {
      "type": "object",
      "properties": {
        "averageRating": {
          "description": "Average score of the ratings received by the related user",
          "type": "number"
        },
        "userId": {
          "type": "integer"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "profilePicture": {
          "description": "User's loaded profile picture data",
          "type": "string"
        }
      }
    },
    "rankingSubscriptions": {
      "type": "object",
      "properties": {
        "learnerSubscriptionsCount": {
          "description": "How many times the user has subscribed as a learner of vacancies",
          "type": "integer"
        },
        "userId": {
          "type": "integer"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "profilePicture": {
          "description": "User's loaded profile picture data",
          "type": "string"
        }
      }
    },
    "rankingTestScores": {
      "type": "object",
      "properties": {
        "totalTestsScore": {
          "description": "Sum of scores of all tests the user have made",
          "type": "number"
        },
        "userId": {
          "type": "integer"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "profilePicture": {
          "description": "User's loaded profile picture data",
          "type": "string"
        }
      }
    },
    "rankingSkillScores": {
      "type": "object",
      "properties": {
        "total": {
          "description": "Sum of the score of all skills that the user has",
          "type": "number"
        },
        "userId": {
          "type": "integer"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "profilePicture": {
          "description": "User's loaded profile picture data",
          "type": "string"
        }
      }
    },
    "newRating": {
      "type": "object",
      "properties": {
        "comment": {
          "description": "Details about the rated user's performance and why he received this grade",
          "type": "string"
        },
        "grade": {
          "description": "Grade that the author gave for the rated user's performance",
          "type": "number"
        },
        "ratedRecipientId": {
          "description": "User whose performance is being rated",
          "type": "integer"
        },
        "projectId": {
          "description": "Project in which the rated user's performance is being evaluated",
          "type": "integer"
        }
      },
      "required": ["comment", "grade", "ratedRecipientId", "projectId"]
    },
    "updatedRating": {
      "type": "object",
      "properties": {
        "comment": {
          "description": "Details about the rated user's performance and why he received this grade",
          "type": "string"
        },
        "grade": {
          "description": "Grade that the author gave for the rated user's performance",
          "type": "number"
        }
      }
    },
    "createdRating": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "comment": {
          "description": "Details about the rated user's performance and why he received this grade",
          "type": "string"
        },
        "grade": {
          "description": "Grade that the author gave for the rated user's performance",
          "type": "number"
        },
        "createdDate": {
          "description": "Date when the rating was made",
          "type": "string"
        },
        "authorId": {
          "description": "User who made the rating",
          "type": "integer"
        },
        "ratedRecipientId": {
          "description": "User whose performance is being rated",
          "type": "integer"
        },
        "projectId": {
          "description": "Project in which the rated user's performance is being evaluated",
          "type": "integer"
        }
      }
    },
    "ratingScore": {
      "type": "object",
      "properties": {
        "averageRating": {
          "description": "The average score or ratings that the rated user received",
          "type": "number"
        }
      }
    },
    "newTechnology": {
      "type": "object",
      "properties": {
        "name": {
          "example": "Javascript",
          "type": "string"
        },
        "iconUrl": {
          "description": "The link of the technology's logo",
          "type": "string"
        }
      },
      "required": ["name"]
    },
    "createdTechnology": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "example": "Javascript",
          "type": "string"
        },
        "iconUrl": {
          "description": "The link of the technology's logo",
          "type": "string"
        }
      }
    },
    "testAnswer": {
      "type": "object",
      "properties": {
        "questionId": {
          "description": "The question the user is answering",
          "type": "number"
        },
        "answerId": {
          "description": "The alternative the user chose to answer the question",
          "type": "number"
        }
      },
      "required": ["questionId", "answerId"]
    },
    "createdTest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number"
        },
        "userId": {
          "description": "User who answered the test",
          "type": "number"
        },
        "technologyId": {
          "description": "Technology about which the test is focused",
          "type": "number"
        },
        "score": {
          "description": "User's score based on how many questions he answered correctly",
          "type": "number"
        },
        "createdDate": {
          "description": "Date when user answered the questions",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "evaluatedTest": {
      "type": "object",
      "properties": {
        "createdTest": {
          "description": "Test for which the score was calculated",
          "$ref": "#/definitions/createdTest"
        },
        "isBiggestScore": {
          "description": "Indicates whether the score the user obtained in the test was the highest among the tests taken for the related technology",
          "type": "boolean"
        }
      }
    },
    "updatedTechnology": {
      "type": "object",
      "properties": {
        "name": {
          "example": "Javascript",
          "type": "string"
        },
        "iconUrl": {
          "description": "The link of the technology's logo",
          "type": "string"
        }
      }
    },
    "createdUser": {
      "type": "object",
      "properties": {
        "id": { "type": "integer" },
        "username": { "type": "string" },
        "firstName": { "type": "string" },
        "lastName": { "type": "string" },
        "email": { "type": "string" },
        "password": { "type": "string" },
        "githubUsername": {
          "description": "The username of the user in github",
          "type": "string"
        },
        "linkedinUrl": {
          "description": "Link of the user's linkedin profile",
          "type": "string"
        },
        "profilePicture": {
          "description": "The loaded profile picture data",
          "type": "string"
        },
        "roleId": {
          "description": "The role that will define the permissions the user has",
          "type": "integer"
        }
      }
    },
    "newUser": {
      "type": "object",
      "properties": {
        "username": { "type": "string" },
        "firstName": { "type": "string" },
        "lastName": { "type": "string" },
        "email": { "type": "string" },
        "password": { "type": "string" },
        "githubUsername": {
          "description": "The username of the user in github",
          "type": "string"
        },
        "linkedinUrl": {
          "description": "Link of the user's linkedin profile",
          "type": "string"
        },
        "profilePicture": {
          "description": "The loaded profile picture data",
          "type": "string"
        },
        "roleId": {
          "description": "The role that will define the permissions the user has",
          "type": "integer"
        }
      }
    },
    "updatedUser": {
      "type": "object",
      "properties": {
        "firstName": { "type": "string" },
        "lastName": { "type": "string" },
        "password": { "type": "string" },
        "githubUsername": {
          "description": "The username of the user in github",
          "type": "string"
        },
        "linkedinUrl": {
          "description": "Link of the user's linkedin profile",
          "type": "string"
        },
        "profilePicture": {
          "description": "The loaded profile picture data",
          "type": "string"
        },
        "roleId": {
          "description": "The role that will define the permissions the user has",
          "type": "integer"
        }
      }
    },
    "loggedUser": {
      "type": "object",
      "properties": {
        "email": {
          "description": "Email of the user who is trying to login",
          "type": "string"
        },
        "password": {
          "description": "Password of the user who is trying to login",
          "type": "string"
        }
      }
    },
    "userLogin": {
      "type": "object",
      "properties": {
        "token": {
          "description": "The token received by the user after he successfully authenticated with his login info",
          "type": "string"
        }
      }
    },
    "createdUserSkill": {
      "type": "object",
      "properties": {
        "id": { "type": "integer" },
        "userId": {
          "type": "integer",
          "description": "The user that has this skill"
        },
        "technologyId": {
          "description": "The technology in which the user is skilled",
          "type": "integer"
        },
        "skillLevel": {
          "description": "How advanced is the user's skill in the related technology",
          "type": "string",
          "enum": ["BÃ¡sico", "IntermediÃ¡rio", "AvanÃ§ado"]
        },
        "score": {
          "description": "The numerical representation of the skill level",
          "type": "number"
        }
      }
    },
    "createdVacancy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "Desenvolvedor Backend"
        },
        "description": {
          "description": "Details about what the chosen user of the vacancy should do",
          "type": "string"
        },
        "createdDate": {
          "description": "Date when the vacancy was created",
          "type": "string",
          "format": "date-time"
        },
        "learnersLimit": {
          "description": "The maximum number of users who can learn the technologies related to the vacancy with the assistance of the chosen candidate",
          "type": "integer"
        },
        "projectId": {
          "description": "Project that requires the vacancy",
          "type": "integer",
          "format": "int64"
        },
        "chosenCandidateId": {
          "description": "The user who was chosen to assume the vacancy",
          "type": ["integer", "null"],
          "format": "int64"
        },
        "project": {
          "description": "Details of the project to which the vacancy is related",
          "$ref": "#/definitions/createdProject"
        }
      }
    },
    "createdVacancyWithoutProject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "Desenvolvedor Backend"
        },
        "description": {
          "description": "Details about what the chosen user of the vacancy should do",
          "type": "string"
        },
        "createdDate": {
          "description": "Date when the vacancy was created",
          "type": "string",
          "format": "date-time"
        },
        "learnersLimit": {
          "description": "The maximum number of users who can learn the technologies related to the vacancy with the assistance of the chosen candidate",
          "type": "integer"
        },
        "projectId": {
          "description": "Project that requires the vacancy",
          "type": "integer",
          "format": "int64"
        },
        "chosenCandidateId": {
          "description": "The user who was chosen to assume the vacancy",
          "type": ["integer", "null"],
          "format": "int64"
        }
      }
    },
    "updatedVacancy": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Desenvolvedor Backend"
        },
        "description": {
          "description": "Details about what the chosen user of the vacancy should do",
          "type": "string"
        },
        "learnersLimit": {
          "description": "The maximum number of users who can learn the technologies related to the vacancy with the assistance of the chosen candidate",
          "type": "integer"
        },
        "chosenCandidateId": {
          "description": "The user who was chosen to assume the vacancy",
          "type": ["integer", "null"],
          "format": "int64"
        }
      }
    },
    "newVacancy": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Desenvolvedor Backend"
        },
        "description": {
          "description": "Details about what the chosen user of the vacancy should do",
          "type": "string"
        },
        "learnersLimit": {
          "description": "The maximum number of users who can learn the technologies related to the vacancy with the assistance of the chosen candidate",
          "type": "integer"
        },
        "projectId": {
          "description": "Project that requires the vacancy",
          "type": "integer",
          "format": "int64"
        },
        "chosenCandidateId": {
          "description": "The user who was chosen to assume the vacancy",
          "type": ["integer", "null"],
          "format": "int64"
        }
      }
    },
    "vacancyDropout": {
      "type": "object",
      "properties": {
        "vacancyDropoutsNumber": {
          "description": "How many times the user gave up from other vacancies where he was the chosen candidate",
          "type": "integer"
        }
      }
    },
    "vacancyWithProjectData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        },
        "learnersLimit": {
          "type": "integer"
        },
        "projectId": {
          "type": "integer"
        },
        "chosenCandidateId": {
          "type": ["integer", "null"]
        },
        "projectName": {
          "type": "string"
        },
        "projectDescription": {
          "type": "string"
        },
        "projectCloseDate": {
          "type": "string",
          "format": "date-time"
        },
        "projectMemberSelectionMethod": {
          "type": "string",
          "enum": ["AleatÃ³ria", "Ordem de inscriÃ§Ã£o", "SeleÃ§Ã£o manual"]
        },
        "projectStatus": {
          "type": "string"
        }
      }
    },
    "newVacancyRequirement": {
      "type": "object",
      "properties": {
        "vacancyId": {
          "description": "The vacancy for which the requirement is being specified",
          "type": "integer",
          "format": "int64"
        },
        "technologyId": {
          "description": "The technology in which the candidate should be skilled",
          "type": "integer",
          "format": "int64"
        },
        "skillLevel": {
          "description": "Minimum skill level required to candidate for the vacancy",
          "type": "string",
          "enum": ["BÃ¡sico", "IntermediÃ¡rio", "AvanÃ§ado"]
        }
      },
      "required": ["vacancyId", "technologyId", "skillLevel"]
    },
    "updatedVacancyRequirement": {
      "type": "object",
      "properties": {
        "technologyId": {
          "description": "The technology in which the candidate should be skilled",
          "type": "integer",
          "format": "int64"
        },
        "skillLevel": {
          "description": "Minimum skill level required to candidate for the vacancy",
          "type": "string",
          "enum": ["BÃ¡sico", "IntermediÃ¡rio", "AvanÃ§ado"]
        }
      }
    },
    "newVacancySubscription": {
      "type": "object",
      "properties": {
        "vacancyId": {
          "description": "Vacancy for which the user candidated as the chosen user",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "createdVacancySubscription": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "userId": {
          "description": "User who candidated for the vacancy",
          "type": "integer",
          "format": "int64"
        },
        "vacancyId": {
          "description": "Vacancy for which the user candidated as the chosen user",
          "type": "integer",
          "format": "int64"
        },
        "createdDate": {
          "description": "Date when the subscription was made",
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "newVotation": {
      "type": "object",
      "properties": {
        "vacancyId": {
          "description": "Vacancy for which its chosen candidate is being voted to be banned",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "createdVotation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "vacancyId": {
          "description": "Vacancy for which its chosen candidate is being voted to be banned",
          "type": "integer",
          "format": "int64"
        },
        "isOpen": {
          "description": "Indicates if the votation is open, receiving votes, or closed, doesn't receive votes",
          "type": "boolean"
        }
      }
    },
    "newVote": {
      "type": "object",
      "properties": {
        "votationId": {
          "description": "The votation for which the user is voting",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "createdVote": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "votationId": {
          "description": "The votation for which the user voted",
          "type": "integer",
          "format": "int64"
        },
        "voterId": {
          "description": "The id of the user who voted",
          "type": "integer",
          "format": "int64"
        },
        "wasUserBanned": {
          "description": "Indicates if the user being voted received the required amount of votes to be banned",
          "type": "boolean"
        }
      }
    },
    "paginatedProjects": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "Page the user wants to see its results",
          "default": 0,
          "required": true
        },
        "quantity": {
          "type": "integer",
          "description": "How many records the user wants to see per page",
          "default": 10,
          "required": true
        },
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/createdProject"
          }
        }
      }
    },
    "paginatedParticipationRanking": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "Page the user wants to see its results",
          "default": 0,
          "required": true
        },
        "quantity": {
          "type": "integer",
          "description": "How many records the user wants to see per page",
          "default": 10,
          "required": true
        },
        "rankings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/participationRanking"
          }
        }
      }
    },
    "paginatedRatingsAverageRanking": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "Page the user wants to see its results",
          "default": 0,
          "required": true
        },
        "quantity": {
          "type": "integer",
          "description": "How many records the user wants to see per page",
          "default": 10,
          "required": true
        },
        "rankings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ratingsAverageRanking"
          }
        }
      }
    },
    "paginatedRatingsMadeRanking": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "Page the user wants to see its results",
          "default": 0,
          "required": true
        },
        "quantity": {
          "type": "integer",
          "description": "How many records the user wants to see per page",
          "default": 10,
          "required": true
        },
        "rankings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ratingsMadeRanking"
          }
        }
      }
    },
    "paginatedTestScoreRanking": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "Page the user wants to see its results",
          "default": 0,
          "required": true
        },
        "quantity": {
          "type": "integer",
          "description": "How many records the user wants to see per page",
          "default": 10,
          "required": true
        },
        "rankings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rankingTestScores"
          }
        }
      }
    },
    "paginatedSubscriptionsRanking": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "Page the user wants to see its results",
          "default": 0,
          "required": true
        },
        "quantity": {
          "type": "integer",
          "description": "How many records the user wants to see per page",
          "default": 10,
          "required": true
        },
        "rankings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rankingSubscriptions"
          }
        }
      }
    },
    "paginatedSkillScoreRanking": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "Page the user wants to see its results",
          "default": 0,
          "required": true
        },
        "quantity": {
          "type": "integer",
          "description": "How many records the user wants to see per page",
          "default": 10,
          "required": true
        },
        "rankings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/rankingSkillScores"
          }
        }
      }
    },
    "paginatedUsers": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "Page the user wants to see its results",
          "default": 0,
          "required": true
        },
        "quantity": {
          "type": "integer",
          "description": "How many records the user wants to see per page",
          "default": 10,
          "required": true
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/createdUser"
          }
        }
      }
    },
    "paginatedRatings": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "Page the user wants to see its results",
          "default": 0,
          "required": true
        },
        "quantity": {
          "type": "integer",
          "description": "How many records the user wants to see per page",
          "default": 10,
          "required": true
        },
        "ratings": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/createdRating"
          }
        }
      }
    },
    "paginatedSubscriptions": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "Page the user wants to see its results",
          "default": 0,
          "required": true
        },
        "quantity": {
          "type": "integer",
          "description": "How many records the user wants to see per page",
          "default": 10,
          "required": true
        },
        "vacancySubscriptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/createdVacancySubscription"
          }
        }
      }
    },
    "paginatedVacancies": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "Page the user wants to see its results",
          "default": 0
        },
        "quantity": {
          "type": "integer",
          "description": "How many records the user wants to see per page",
          "default": 10
        },
        "vacancies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/createdVacancy"
          }
        }
      }
    },
    "paginatedVacanciesWithProjectData": {
      "type": "object",
      "properties": {
        "page": {
          "type": "integer",
          "description": "Page the user wants to see its results",
          "default": 0
        },
        "quantity": {
          "type": "integer",
          "description": "How many records the user wants to see per page",
          "default": 10
        },
        "vacancies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/vacancyWithProjectData"
          }
        }
      }
    },
    "projectMember": {
      "type": "object",
      "properties": {
        "isProjectMember": {
          "type": "boolean",
          "description": "Indicates if the user who is logged is a member of the project whose id was provided",
          "example": false
        }
      }
    },
    "errorMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "The reason of the error",
          "example": "No user with the informed id was found"
        }
      }
    },
    "zodErrorMessageList": {
      "type": "object",
      "properties": {
        "0": {
          "type": "array",
          "description": "A list with the errors on the values detected by zod"
        },
        "1": {
          "type": "array",
          "description": "A list with the errors on the values detected by zod"
        }
      }
    },
    "zodSingleErrorMessage": {
      "type": "object",
      "properties": {
        "fieldWithError": {
          "description": "A list with the errors on the values detected by zod",
          "type": "array"
        },
        "anotherFieldWithError": {
          "description": "A list with the errors on the values detected by zod",
          "type": "array"
        }
      }
    }
  }
}
