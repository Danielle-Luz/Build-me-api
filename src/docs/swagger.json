{
  "openapi": "3.0.0",
  "info": {
    "description": "Platform where users can manage and join programming projects",
    "version": "1.0.0",
    "title": "Build Me",
    "contact": { "email": "daniln2209@gmail.com" }
  },
  "schemes": ["http"],
  "host": "localhost:3000",
  "basePath": "/",
  "tags": [
    {
      "name": "Answers",
      "description": "Manage the available answers for each question"
    },
    {
      "name": "Learners",
      "description": "Allow users to associate with a vacancy as learners, individuals who will learn about the technologies required for the vacancy with the help of the selected candidate"
    },
    {
      "name": "Projects",
      "description": "Manage programming projects where the users can colaborate by joining on related vacancies"
    },
    {
      "name": "Questions",
      "description": "Manage the questions that can be associated with answers and used to create tests for evaluating the userâ€™s skills"
    },
    {
      "name": "Rankings",
      "description": "Displays user information sorted into rankings based on various parameters, such as: the highest number of reviews received, the highest number of project participations, and more"
    },
    {
      "name": "Ratings",
      "description": "Manage the ratings that were created to assess the performance of colleagues in a project"
    },
    {
      "name": "Technologies",
      "description": "Administer the technologies that can be designated as requirements for projects' vacancies and user skills"
    },
    {
      "name": "Tests",
      "description": "Management of tests that evaluate the skill level of a user in a certain technology"
    },
    {
      "name": "Users",
      "description": "Manage the users that can use the platform"
    }
  ],
  "paths": {
    "/answers": {
      "post": {
        "summary": "Create one or more answers",
        "description": "Create answers for questions that users can select during tests",
        "produces": ["application/json"],
        "tags": ["Answers"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/newAnswer"
                }
              },
              "examples": {
                "Valid body": {
                  "value": [
                    {
                      "answer": "HTML defines the structure of a web page",
                      "questionId": 1,
                      "isRight": true
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "One or more answers created with success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdAnswer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "One or more answers are missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodErrorMessageList"
                },
                "examples": {
                  "Missing properties and invalid formats": {
                    "value": [
                      {
                        "0": [
                          "Required",
                          "Expected number, received string",
                          "Expected boolean, received string"
                        ]
                      }
                    ]
                  },
                  "Wrong question id": {
                    "value": [
                      {
                        "0": ["No question with the informed id was found"]
                      }
                    ]
                  },
                  "The answer was marked as right while the related question was already associated with another right answer": {
                    "value": [
                      {
                        "0": ["This question already has a right answer"]
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user didn't include the token before sending the request, it was invalid or the user doesn't have permission to access the route",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/answers/questions/{questionId}": {
      "get": {
        "summary": "Question's related answers",
        "description": "Shows all the answers related to a specific question",
        "produces": ["application/json"],
        "tags": ["Answers"],
        "parameters": [
          {
            "name": "questionId",
            "in": "path",
            "description": "Id of the question for which the related answers should be shown",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All the answers related to the question",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdAnswer"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided question id does not correspond to any question identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No question with the informed id was found"
                }
              }
            }
          },
          "401": {
            "description": "The user didn't include the token before sending the request, it was invalid or the user doesn't have permission to access the route",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/answers/{id}": {
      "get": {
        "summary": "Get a specific answer",
        "description": "Show the data of a specific answer",
        "produces": ["application/json"],
        "tags": ["Answers"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the answer that should be shown",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data for the provided answer id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdAnswer"
                }
              }
            }
          },
          "404": {
            "description": "The provided answer id does not correspond to any answer identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No answer with the informed id was found"
                }
              }
            }
          },
          "401": {
            "description": "The user didn't include the token before sending the request, it was invalid or the user doesn't have permission to access the route",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a specific answer",
        "description": "Update one or more fields of a specific answer",
        "produces": ["application/json"],
        "tags": ["Answers"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the answer that should be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/updatedAnswer"
              },
              "examples": {
                "Valid body": {
                  "value": {
                    "answer": "HTML is a markup language"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The answer was updated with success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdAnswer"
                }
              }
            }
          },
          "400": {
            "description": "The format of one or more values being updated is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "examples": {
                  "Values with invalid formats": {
                    "value": {
                      "answer": ["Expected string, received number"],
                      "isRight": ["Expected boolean, received string"]
                    }
                  },
                  "The answer was marked as right while the related question was already associated with another right answer": {
                    "value": {
                      "message": "This questions already has a right answer"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user didn't include the token before sending the request, it was invalid or the user doesn't have permission to access the route",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a specific answer",
        "description": "",
        "produces": ["application/json"],
        "tags": ["Answers"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the answer that should be deleted",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The answer was deleted with success"
          },
          "404": {
            "description": "The provided answer id does not correspond to any answer identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No answer with the informed id was found"
                }
              }
            }
          },
          "401": {
            "description": "The user didn't include the token before sending the request, it was invalid or the user doesn't have permission to access the route",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/learners": {
      "post": {
        "summary": "Create a new learner",
        "description": "Create a learner associated with a vacancy",
        "tags": ["Learners"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/newLearner"
              },
              "examples": {
                "Valid body": {
                  "value": {
                    "vacancyId": 14
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Learner created with success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdLearner"
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "examples": {
                  "Invalid vacancyId": {
                    "value": {
                      "vacancyId": ["Expected number, received string"]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "The user didn't include the token before sending the request, it was invalid or the user doesn't have permission to access the route",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided vacancy id does not correspond to any vacancy identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No vacancy with the informed id was found"
                }
              }
            }
          },
          "409": {
            "description": "The user already created a learner record related to the same vacancy",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "This user was already registered as a learner for this vacancy"
                }
              }
            }
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "User reached learner association limit": {
                    "description": "The user has registered three times as a learner for different vacancies from open projects and is attempting to become a learner for another vacancy",
                    "value": {
                      "message": "The user has already reached the limit of 3 subscriptions as a learner"
                    }
                  },
                  "Vacancy reached learner association limit": {
                    "description": "Each vacancy has a limit of learners that can be related and this one have reached its limit",
                    "value": {
                      "message": "It's not possible to add a new learner, the limit of 5 learners related to this vacancy was already reached"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all learners",
        "description": "Retrieve a list of all learners",
        "tags": ["Learners"],
        "responses": {
          "200": {
            "description": "List of all learners",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdLearner"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/learners/vacancies/{vacancyId}": {
      "get": {
        "summary": "Get learners by vacancy id",
        "description": "Retrieve learners associated with a specific vacancy",
        "tags": ["Learners"],
        "parameters": [
          {
            "name": "vacancyId",
            "in": "path",
            "description": "Id of the vacancy",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of learners associated with the vacancy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdLearner"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Vacancy id not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No vacancy with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/learners/users/{candidateId}": {
      "get": {
        "summary": "Get learners by candidate/user id",
        "description": "Retrieve learner records linked to the user with the given id",
        "tags": ["Learners"],
        "parameters": [
          {
            "name": "candidateId",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of records with which the user, identified by the provided id, is associated as a learner",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdLearner"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No user with the specified id was found in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No candidate with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/learners/{id}": {
      "get": {
        "summary": "Get a learner by id",
        "description": "Retrieve the data of a specific learner by id",
        "tags": ["Learners"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the learner to be shown",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data of the learner's record whose id was provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdLearner"
                }
              }
            }
          },
          "404": {
            "description": "No learner record with the provided id was found in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No learner with the informed id was found"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a learner by id",
        "description": "Delete the learner's record whose id was provided",
        "tags": ["Learners"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the learner to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Learner deleted successfully"
          },
          "404": {
            "description": "No learner record with the provided id was found in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No learner with the informed id was found"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "The user is not an admin and is trying to delete a record related with other user",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects": {
      "post": {
        "summary": "Create a new project",
        "description": "Create a new programming project",
        "tags": ["Projects"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/newProject"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Project created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdProject"
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "examples": {
                  "Invalid body": {
                    "value": {
                      "name": ["Expected string, received number"]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "The user doesn't have permission to create projects",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "A date before the current one was provided in the 'closeDate' field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "The close date should be later than or equal to the current date"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all projects",
        "description": "Retrieve a list of all projects",
        "tags": ["Projects"],
        "responses": {
          "200": {
            "description": "List of all created projects",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdProject"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/{projectId}": {
      "get": {
        "summary": "Get a specific project",
        "description": "Show the data of a specific project",
        "tags": ["Projects"],
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "ID of the project",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data for the provided project id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdProject"
                }
              }
            }
          },
          "404": {
            "description": "The provided project id does not correspond to any project identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No project with the informed id was found"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a specific project",
        "description": "Update one or more fields of a specific project",
        "tags": ["Projects"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the project that should be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/updatedProject"
              },
              "examples": {
                "Valid body": {
                  "value": {
                    "name": "Project XPTO"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Project updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdProject"
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "examples": {
                  "Value with invalid property": {
                    "value": {
                      "name": ["Expected string, received number"]
                    }
                  },
                  "No field provided for update": {
                    "value": {
                      "message": "No valid field was provided for update"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "The user is not allowed to update projects or is trying to update a project that was created by other user",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "A date before the current one was provided in the 'closeDate' field",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "The close date should be later than or equal to the current date"
                }
              }
            }
          },
          "404": {
            "description": "The provided project id does not correspond to any project identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                }
              },
              "example": {
                "message": "No project with the informed id was found"
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a project by id",
        "description": "Delete the project's record whose id was provided",
        "tags": ["Projects"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the project",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Project deleted successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "The user is not an admin and is trying to delete a project created by other user",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No project record with the provided id was found in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No project with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/projects/open": {
      "get": {
        "summary": "Get open projects",
        "description": "Show all the projects whose â€˜closeDateâ€™ field has a date later than the current one, meaning that the project's subscriptions are still open",
        "tags": ["Projects"],
        "responses": {
          "200": {
            "description": "List of open projects available for subscriptions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/newProject"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/projects/selectionMethod/{selectionMethod}": {
      "get": {
        "summary": "Get projects by member selection method",
        "description": "Shows all projects whose member selection method is equal to the specified one",
        "tags": ["Projects"],
        "parameters": [
          {
            "name": "selectionMethod",
            "in": "path",
            "description": "The way the users are selected for the project's vacancies",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["AleatÃ³ria", "Ordem de inscriÃ§Ã£o", "SeleÃ§Ã£o manual"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of projects whose member selection method is equal to the specified one",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdProject"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The value provided is not one of the available member selection methods",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "Member selection method not found, the values available are: AleatÃ³ria, Ordem de inscriÃ§Ã£o e Escolha manual"
                }
              }
            }
          }
        }
      }
    },
    "/projects/users/{createdById}": {
      "get": {
        "summary": "Get projects by creator",
        "description": "Show all the projects created by the user whose id was specified",
        "tags": ["Projects"],
        "parameters": [
          {
            "name": "createdById",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of projects created by the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdProject"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided user id does not correspond to any user identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No user with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/projects/search/{value}": {
      "get": {
        "summary": "Searches projects by a value",
        "description": "Shows the data of all projects that have the searched value in their description or name fields",
        "tags": ["Projects"],
        "parameters": [
          {
            "name": "value",
            "in": "path",
            "description": "Searched value",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of projects that have the searched value",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdProject"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/questions": {
      "post": {
        "summary": "Create a new question",
        "tags": ["Questions"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/newQuestion"
              },
              "example": {
                "question": "Qual Ã© a diferenÃ§a entre HTML e HTML5?",
                "technologyId": 1,
                "difficultyLevel": 2
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Question created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdQuestion"
                },
                "example": {
                  "id": 1,
                  "question": "Qual Ã© a diferenÃ§a entre HTML e HTML5?",
                  "technologyId": 1,
                  "difficultyLevel": 2
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "examples": {
                  "Invalid body": {
                    "value": {
                      "question": ["Expected string, received number"],
                      "technologyId": ["required"]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "Users that are not admins can't create questions",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided technology id does not correspond to any technology identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No technology with the informed id was found"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all questions",
        "tags": ["Questions"],
        "responses": {
          "200": {
            "description": "List of all questions in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/questionWithAnswers"
                },
                "example": [
                  {
                    "id": 19,
                    "question": "What is HTML?",
                    "technologyId": 5,
                    "difficultyLevel": 3
                  },
                  {
                    "id": 23,
                    "question": "What is CSS?",
                    "technologyId": 3,
                    "difficultyLevel": 1
                  }
                ]
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "The user is not allowed to see questions data",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/questions/{id}": {
      "get": {
        "summary": "Get question by id",
        "description": "Retrieve the data of a specific question by id",
        "tags": ["Questions"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the question to be shown",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data of the question's record whose id was provided",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/questionWithTechnology"
                },
                "example": {
                  "id": 18,
                  "question": "What is JavaScript?",
                  "technologyId": 3,
                  "difficultyLevel": 2,
                  "technology": {
                    "id": 3,
                    "name": "JavaScript",
                    "iconUrl": "https://img.icons8.com/ios/150/javascript--v1.png"
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "The user is not allowed to see questions data",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided question id does not correspond to any question identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No question with the informed id was found"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update question by id",
        "description": "Update one or more fields of a specific question",
        "tags": ["Questions"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the question that should be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/updatedQuestion"
              },
              "example": {
                "difficultyLevel": 1
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "The format of the body properties is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "examples": {
                  "Invalid body": {
                    "value": {
                      "question": ["Expected string, received number"]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "Users that are not admins can't update questions",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided technology id does not correspond to any technology identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Invalid question id": {
                    "description": "The question being updated doesn't exist",
                    "value": {
                      "message": "No question with the informed id was found"
                    }
                  },
                  "Invalid technology id": {
                    "description": "The id of the technology that was provided for update doesn't exist",
                    "value": {
                      "message": "No technology with the informed id was found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete question by id",
        "tags": ["Questions"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the question to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Question deleted successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "A user that is not admin can not delete questions",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided question id does not correspond to any question identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No question with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/questions/technologies/{technologyId}": {
      "get": {
        "summary": "Get questions by technology id",
        "description": "Returns a list with all the questions related to the specified technology",
        "tags": ["Questions"],
        "parameters": [
          {
            "name": "technologyId",
            "in": "path",
            "description": "Id of the technology",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All the questions related to the technology",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/questionWithTechnology"
                  }
                },
                "example": [
                  {
                    "id": 18,
                    "question": "What is JavaScript?",
                    "technologyId": 3,
                    "difficultyLevel": 2,
                    "technology": {
                      "id": 3,
                      "name": "JavaScript",
                      "iconUrl": "https://img.icons8.com/ios/150/javascript--v1.png"
                    }
                  }
                ]
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "The user is not allowed to see questions data",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided technology id does not correspond to any technology identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No technology with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/questions/random/technologies/{technologyId}": {
      "get": {
        "summary": "Get random questions by technology id",
        "description": "Returns a list, with a maximum of 10 random questions related to the specified technology, each question associated with its respective answer",
        "tags": ["Questions"],
        "parameters": [
          {
            "name": "technologyId",
            "in": "path",
            "description": "Id of the technology for which random questions should be obtained",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of random questions for the specified technology",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/questionWithAnswers"
                },
                "example": [
                  {
                    "id": 19,
                    "question": "What is JavaScript?",
                    "technologyId": 3,
                    "difficultyLevel": 1,
                    "answers": [
                      {
                        "id": 8,
                        "answer": "Answer 3",
                        "questionId": 19
                      },
                      {
                        "id": 6,
                        "answer": "Answer 1",
                        "questionId": 19
                      },
                      {
                        "id": 7,
                        "answer": "Answer 2",
                        "questionId": 19
                      }
                    ]
                  },
                  {
                    "id": 20,
                    "question": "What is CSS?",
                    "technologyId": 3,
                    "difficultyLevel": 3,
                    "answers": [
                      {
                        "id": 9,
                        "answer": "Answer 1",
                        "questionId": 20
                      }
                    ]
                  }
                ]
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "The user is not allowed to see questions data",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided technology id does not correspond to any technology identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No technology with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/rankings/vacancies/participations": {
      "get": {
        "summary": "Display users in order of the number of vacancies they've been selected for",
        "tags": ["Rankings"],
        "responses": {
          "200": {
            "description": "List the users' information along with the frequency of their participation as candidates for vacancies",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/participationRanking"
                  }
                },
                "example": [
                  {
                    "applicationsCount": 5,
                    "id": 1,
                    "userId": 1,
                    "firstName": "John",
                    "lastName": "Doe",
                    "profilePicture": "https://example.com/johndoe.jpg"
                  },
                  {
                    "applicationsCount": 3,
                    "id": 2,
                    "userId": 2,
                    "firstName": "Emily",
                    "lastName": "Smith",
                    "profilePicture": "https://example.com/emilysmith.jpg"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/rankings/ratings/authored": {
      "get": {
        "summary": "Display users in order of the number of ratings they've created",
        "tags": ["Rankings"],
        "responses": {
          "200": {
            "description": "List the users' information along with the number of ratings created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ratingsMadeRanking"
                  }
                },
                "example": [
                  {
                    "ratingsMadeCount": 5,
                    "id": 1,
                    "userId": 1,
                    "firstName": "John",
                    "lastName": "Doe",
                    "profilePicture": "https://example.com/johndoe.jpg"
                  },
                  {
                    "ratingsMadeCount": 3,
                    "id": 2,
                    "userId": 2,
                    "firstName": "Emily",
                    "lastName": "Smith",
                    "profilePicture": "https://example.com/emilysmith.jpg"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/rankings/ratings/average": {
      "get": {
        "summary": "Display users in order of the average score of ratings they've received",
        "tags": ["Rankings"],
        "responses": {
          "200": {
            "description": "List the users' information along with the average score",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ratingsAverageRanking"
                  }
                },
                "example": [
                  {
                    "averageRating": 5,
                    "userId": 1,
                    "firstName": "John",
                    "lastName": "Doe",
                    "profilePicture": "https://example.com/johndoe.jpg"
                  },
                  {
                    "averageRating": 3,
                    "userId": 2,
                    "firstName": "Emily",
                    "lastName": "Smith",
                    "profilePicture": "https://example.com/emilysmith.jpg"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "rankings/learners/subscriptions": {
      "get": {
        "summary": "Display users in order of the number of learner's subscriptions they have made",
        "tags": ["Rankings"],
        "responses": {
          "200": {
            "description": "List the users' information along with the number of learner's subscriptions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/rankingSubscriptions"
                  }
                },
                "example": [
                  {
                    "learnerSubscriptionsCount": 5,
                    "userId": 1,
                    "firstName": "John",
                    "lastName": "Doe",
                    "profilePicture": "https://example.com/johndoe.jpg"
                  },
                  {
                    "learnerSubscriptionsCount": 3,
                    "userId": 2,
                    "firstName": "Emily",
                    "lastName": "Smith",
                    "profilePicture": "https://example.com/emilysmith.jpg"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "rankings/tests/scores": {
      "get": {
        "summary": "Display users in order of the total sum of their test scores",
        "tags": ["Rankings"],
        "responses": {
          "200": {
            "description": "List the users' information along with the tests' scores",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/rankingTestScores"
                  }
                },
                "example": [
                  {
                    "totalTestsScore": 40.0,
                    "userId": 1,
                    "firstName": "John",
                    "lastName": "Doe",
                    "profilePicture": "https://example.com/johndoe.jpg"
                  },
                  {
                    "totalTestsScore": 15.0,
                    "userId": 2,
                    "firstName": "Emily",
                    "lastName": "Smith",
                    "profilePicture": "https://example.com/emilysmith.jpg"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "rankings/userSkills/scores": {
      "get": {
        "summary": "Display users in order of the total sum of their skill scores",
        "tags": ["Rankings"],
        "responses": {
          "200": {
            "description": "List the users' information along with their total skills' scores",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/rankingSkillScores"
                  }
                },
                "example": [
                  {
                    "skillScore": 65.0,
                    "userId": 1,
                    "firstName": "John",
                    "lastName": "Doe",
                    "profilePicture": "https://example.com/johndoe.jpg",
                    "technologyName": "Node JS"
                  },
                  {
                    "skillScore": 40.0,
                    "userId": 2,
                    "firstName": "Emily",
                    "lastName": "Smith",
                    "profilePicture": "https://example.com/emilysmith.jpg",
                    "technologyName": "HTML"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/ratings": {
      "post": {
        "summary": "Create a new rating",
        "tags": ["Ratings"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/newRating"
              },
              "example": {
                "comment": "Good team work!",
                "grade": 5,
                "ratedRecipientId": 2,
                "projectId": 2
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rating created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdRating"
                },
                "example": {
                  "id": 2,
                  "comment": "Good team work!",
                  "grade": 5,
                  "authorId": 3,
                  "ratedRecipientId": 2,
                  "createdDate": "2023-12-27T05:20:46.289Z",
                  "projectId": 2
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "examples": {
                  "Invalid body": {
                    "value": {
                      "grade": ["Expected number, received boolean"],
                      "ratedRecipientId": ["required"]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "User is trying to rate himself": {
                    "description": "The user tried to create a rating for himself, but a user can only rate other project colleague",
                    "value": {
                      "message": "A user cannot rate himself"
                    }
                  },
                  "Rated user is not a project colleague": {
                    "description": "A user canâ€™t rate others with whom they havenâ€™t worked, they can only rate colleagues from the specified project",
                    "value": {
                      "message": "A user is unable to rate a user they haven't collaborated with on the specified project"
                    }
                  },
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "Users that don't have permission can't create ratings",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided user id does not correspond to any user identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Rated recipient not found": {
                    "value": {
                      "message": "No user with the informed id was found"
                    }
                  },
                  "Author not found": {
                    "value": {
                      "message": "No user with the informed id was found"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "A user can only create one rating every 15 days for the same individual within the same project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "This user has already rated the same user for this project within the last fifteen days"
                }
              }
            }
          }
        }
      }
    },
    "/ratings/made/{authorId}": {
      "get": {
        "summary": "Display user's created ratings",
        "description": "Shows all the ratings created by a specific user for other users",
        "tags": ["Ratings"],
        "responses": {
          "200": {
            "description": "Ratings created by the user with the provided id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdRating"
                  }
                },
                "example": [
                  {
                    "id": 1,
                    "comment": "Good team work!",
                    "grade": 5,
                    "authorId": 3,
                    "ratedRecipientId": 2,
                    "createdDate": "2023-12-27T05:20:46.289Z",
                    "projectId": 2
                  },
                  {
                    "id": 2,
                    "comment": "Poor team work!",
                    "grade": 1,
                    "authorId": 3,
                    "ratedRecipientId": 1,
                    "createdDate": "2023-11-11T05:20:46.289Z",
                    "projectId": 4
                  }
                ]
              }
            }
          },
          "404": {
            "description": "The provided author id id does not correspond to any user identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No user with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/ratings/reveived/{ratedRecipientId}": {
      "get": {
        "summary": "Display user's received ratings",
        "description": "Shows all the ratings received by a specific user made by other users",
        "tags": ["Ratings"],
        "responses": {
          "200": {
            "description": "Ratings received by the user with the provided id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdRating"
                  }
                },
                "example": [
                  {
                    "id": 9,
                    "comment": "Amazing design skills!",
                    "grade": 5,
                    "authorId": 1,
                    "ratedRecipientId": 2,
                    "createdDate": "2024-01-02T03:18:23.289Z",
                    "projectId": 2
                  },
                  {
                    "id": 10,
                    "comment": "You helped me a lot!",
                    "grade": 5,
                    "authorId": 4,
                    "ratedRecipientId": 2,
                    "createdDate": "2024-01-05T00:14:12.289Z",
                    "projectId": 4
                  }
                ]
              }
            }
          },
          "404": {
            "description": "The provided recipient id id does not correspond to any user identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No user with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/ratings/average/{ratedRecipientId}": {
      "get": {
        "summary": "User's average rating score",
        "description": "Shows the average score of the ratings received by the user",
        "tags": ["Ratings"],
        "responses": {
          "200": {
            "description": "Average score of the ratings received by the user with the provided id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdRating"
                  }
                },
                "example": { "averageRating": 8.5 }
              }
            }
          },
          "404": {
            "description": "The provided recipient id id does not correspond to any user identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No user with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/ratings/{id}": {
      "patch": {
        "summary": "Update a rating",
        "tags": ["Ratings"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the rating to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/updatedRating"
              },
              "example": {
                "grade": 5
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rating updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdRating"
                },
                "example": {
                  "id": 2,
                  "comment": "Good team work!",
                  "grade": 5,
                  "authorId": 3,
                  "ratedRecipientId": 2,
                  "createdDate": "2023-12-27T05:20:46.289Z",
                  "projectId": 2
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "examples": {
                  "Invalid body": {
                    "value": {
                      "grade": ["Expected number, received boolean"]
                    }
                  },
                  "No field provided for update": {
                    "value": {
                      "message": "No valid field was provided for update"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Updating other user's rating": {
                    "description": "The user tried to update a rating created by other user",
                    "value": {
                      "message": "A user cannot change ratings from other users"
                    }
                  },
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "Users that don't have permission can't update ratings",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided rating id does not correspond to any rating identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No rating with the informed id was found"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a rating",
        "tags": ["Ratings"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the rating to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Rating deleted successfully"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Deleting other user's rating": {
                    "description": "The user tried to delete a rating created by other user",
                    "value": {
                      "message": "A user cannot change ratings from other users"
                    }
                  },
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "Users that don't have permission can't delete ratings",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided rating id does not correspond to any rating identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No rating with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/technologies": {
      "post": {
        "summary": "Create a new technology",
        "tags": ["Technologies"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/newTechnology"
              },
              "example": {
                "name": "CSS",
                "iconUrl": "https://css.png"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Technology created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdTechnology"
                },
                "example": {
                  "id": 1,
                  "name": "CSS",
                  "iconUrl": "https://css.png"
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "examples": {
                  "Invalid body": {
                    "value": {
                      "name": ["required"]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "A user that is not admin can not create technologies",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "A technology name should be unique, it can't have the same name of an already existent one",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "A technology with this name was already created"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get all technologies",
        "tags": ["Technologies"],
        "responses": {
          "200": {
            "description": "List of all technologies in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/questionWithAnswers"
                },
                "example": [
                  {
                    "id": 1,
                    "name": "CSS",
                    "iconUrl": "https://css.png"
                  },
                  {
                    "id": 2,
                    "name": "JavaScript",
                    "iconUrl": "https://javascript.png"
                  }
                ]
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "The user is not allowed to see technologies data",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/technologies/{id}": {
      "get": {
        "summary": "Get a specific technology",
        "description": "Show the information for the technology with the provided id",
        "produces": ["application/json"],
        "tags": ["Technologies"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the technology that should be shown",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The data for the provided technology id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdTechnology"
                },
                "example": {
                  "id": 1,
                  "name": "CSS",
                  "iconUrl": "https://css.png"
                }
              }
            }
          },
          "404": {
            "description": "The provided technology id does not correspond to any technology identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No technology with the informed id was found"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "The user is not allowed to see technologies data",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update a specific technology",
        "description": "Update one or more fields of a specific technology",
        "produces": ["application/json"],
        "tags": ["Technologies"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the technology that should be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/definitions/createdTechnology"
              },
              "examples": {
                "Valid body": {
                  "value": {
                    "id": 1,
                    "name": "CSS",
                    "iconUrl": "https://css.png"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The technology was updated with success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdTechnology"
                },
                "example": {
                  "id": 1,
                  "name": "CSS",
                  "iconUrl": "https://css.png"
                }
              }
            }
          },
          "400": {
            "description": "The format of one or more values being updated is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "examples": {
                  "Invalid body": {
                    "value": {
                      "iconUrl": ["Expected string, received number"]
                    }
                  },
                  "No field provided for update": {
                    "value": {
                      "message": "No valid field was provided for update"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "A user that is not admin can not update technologies",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided technology id does not correspond to any technology identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No technology with the informed id was found"
                }
              }
            }
          },
          "409": {
            "description": "A technology name should be unique, it can't have the same name of an already existent one",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "A technology with this name was already created"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a specific technology",
        "description": "",
        "produces": ["application/json"],
        "tags": ["Technologies"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the technology that should be deleted",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The technology was deleted with success"
          },
          "404": {
            "description": "The provided technology id does not correspond to any technology identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No technology with the informed id was found"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "A user that is not admin can not delete technologies",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tests/evaluate": {
      "post": {
        "summary": "Evaluate answers and get test score",
        "description": "Check if each question id is related to the correct answer id",
        "produces": ["application/json"],
        "tags": ["Tests"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/testAnswer"
                }
              },
              "example": [
                {
                  "questionId": 26,
                  "answerId": 13
                },
                {
                  "questionId": 25,
                  "answerId": 14
                }
              ]
            }
          }
        },
        "responses": {
          "200": {
            "description": "Test score calculated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdTest"
                },
                "example": {
                  "createdTest": {
                    "id": 70,
                    "userId": 2,
                    "technologyId": 6,
                    "score": 200,
                    "createdDate": "2024-01-10T09:26:53.944Z"
                  },
                  "isBiggestScore": true
                }
              }
            }
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodErrorMessageList"
                },
                "examples": {
                  "Invalid body": {
                    "description": "One or more answers are missing required properties, or the format of their values is incorrect",
                    "value": [
                      {
                        "0": ["Required"],
                        "1": ["Expected number, received string"]
                      }
                    ]
                  },
                  "Answer id or question id not found": {
                    "description": "Answer id or question id provided in one or more objects are incorrect",
                    "value": [
                      {
                        "0": [
                          "No question with the informed id was found",
                          "No answer with the informed id was found"
                        ]
                      }
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "A question id cannot be repeated more than once or be related to more than one answer id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "The question(s) with id(s) 1, 2 were answered more than once"
                }
              }
            }
          }
        }
      }
    },
    "/tests/{id}": {
      "get": {
        "summary": "Get test by id",
        "description": "Retrieve details of a specific test by its id",
        "produces": ["application/json"],
        "tags": ["Tests"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the test to retrieve",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Details of the requested test",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/createdTest"
                },
                "example": {
                  "id": 70,
                  "userId": 2,
                  "technologyId": 6,
                  "score": 200,
                  "createdDate": "2024-01-10T09:26:53.944Z"
                }
              }
            }
          },
          "404": {
            "description": "Test id not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No test with the informed id was found"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tests/technologies/{technologyId}": {
      "get": {
        "summary": "Get tests by technology id",
        "description": "Retrieve tests related to a specific technology",
        "produces": ["application/json"],
        "tags": ["Tests"],
        "parameters": [
          {
            "name": "technologyId",
            "in": "path",
            "description": "Id of the technology to retrieve tests",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tests related to the technology",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdTest"
                  }
                },
                "example": [
                  {
                    "id": 54,
                    "userId": 1,
                    "technologyId": 3,
                    "score": 700,
                    "createdDate": "2024-01-03T00:14:58.031Z"
                  },
                  {
                    "id": 55,
                    "userId": 1,
                    "technologyId": 3,
                    "score": 1000,
                    "createdDate": "2024-01-03T00:16:13.391Z"
                  },
                  {
                    "id": 56,
                    "userId": 1,
                    "technologyId": 3,
                    "score": 1000,
                    "createdDate": "2024-01-03T00:16:29.230Z"
                  }
                ]
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tests/users/{userId}": {
      "get": {
        "summary": "Get tests by user id",
        "description": "Retrieve tests made by a specific user",
        "produces": ["application/json"],
        "tags": ["Tests"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user to retrieve tests",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tests related to the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdTest"
                  }
                },
                "example": [
                  {
                    "id": 67,
                    "userId": 1,
                    "technologyId": 6,
                    "score": 500,
                    "createdDate": "2024-01-03T02:00:56.860Z"
                  },
                  {
                    "id": 62,
                    "userId": 1,
                    "technologyId": 6,
                    "score": 300,
                    "createdDate": "2024-01-03T00:22:40.675Z"
                  },
                  {
                    "id": 70,
                    "userId": 2,
                    "technologyId": 6,
                    "score": 200,
                    "createdDate": "2024-01-10T09:26:53.944Z"
                  }
                ]
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tests/users/{userId}/technologies/{technologyId}": {
      "get": {
        "summary": "Get test by user id and technology id",
        "description": "Get the test made by the user with the given id about the technology with the specified id",
        "produces": ["application/json"],
        "tags": ["Tests"],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "Id of the user",
            "required": true,
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "technologyId",
            "in": "path",
            "description": "Id of the technology",
            "required": true,
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tests related to the user and technology",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/createdTest"
                  },
                  "example": [
                    {
                      "id": 67,
                      "userId": 1,
                      "technologyId": 6,
                      "score": 500,
                      "createdDate": "2024-01-03T02:00:56.860Z"
                    },
                    {
                      "id": 62,
                      "userId": 1,
                      "technologyId": 6,
                      "score": 300,
                      "createdDate": "2024-01-03T00:22:40.675Z"
                    },
                    {
                      "id": 70,
                      "userId": 1,
                      "technologyId": 6,
                      "score": 200,
                      "createdDate": "2024-01-10T09:26:53.944Z"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Get all users",
        "description": "Retrieve a list of all users",
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "List of all users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/createdUser" }
                },
                "example": [
                  {
                    "id": 103,
                    "username": "NewUser",
                    "firstName": "NewName",
                    "lastName": "NewLastName",
                    "email": "newuser@example.com",
                    "githubUsername": "newuser",
                    "linkedinUrl": "https://www.linkedin.com/in/newuser/",
                    "password": "password456",
                    "roleId": 1,
                    "deletedDate": null
                  }
                ]
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "description": "Create a new user with the provided information",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/definitions/newUser" },
              "example": {
                "username": "NewUser",
                "firstName": "NewName",
                "lastName": "NewLastName",
                "email": "newuser@example.com",
                "githubUsername": "newuser",
                "linkedinUrl": "https://www.linkedin.com/in/newuser/",
                "password": "password456",
                "roleId": 1
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/definitions/createdUser" },
                "example": {
                  "id": 103,
                  "username": "NewUser",
                  "firstName": "NewName",
                  "lastName": "NewLastName",
                  "email": "newuser@example.com",
                  "githubUsername": "newuser",
                  "linkedinUrl": "https://www.linkedin.com/in/newuser/",
                  "password": "password456",
                  "roleId": 1,
                  "deletedDate": null
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "example": {
                  "email": ["Expected string, received number"]
                }
              }
            }
          },
          "404": {
            "description": "The provided role id does not correspond to any role identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No role with the informed id was found"
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Username in use": {
                    "description": "The provided username was already related to an existent user",
                    "value": {
                      "message": "An existent user already has this username"
                    }
                  },
                  "Email in use": {
                    "description": "The provided email was already related to an existent user",
                    "value": {
                      "message": "An existent user already has this email"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/logged": {
      "get": {
        "summary": "Get logged-in user",
        "description": "Retrieve information about the user whose token was provided",
        "tags": ["Users"],
        "responses": {
          "200": {
            "description": "Logged-in user information",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/definitions/createdUser" },
                "example": {
                  "id": 103,
                  "username": "NewUser",
                  "firstName": "NewName",
                  "lastName": "NewLastName",
                  "email": "newuser@example.com",
                  "githubUsername": "newuser",
                  "linkedinUrl": "https://www.linkedin.com/in/newuser/",
                  "password": "password456",
                  "roleId": 1,
                  "deletedDate": null
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users/search/{value}": {
      "get": {
        "summary": "Search users by a value",
        "description": "Shows the data of all users that have the searched value in their username, firstname, lastname, email and/or github username fields",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "value",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "The value to search for"
          }
        ],
        "responses": {
          "200": {
            "description": "List of users matching the search criteria",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/definitions/createdUser" }
                },
                "example": [
                  {
                    "id": 103,
                    "username": "NewUser",
                    "firstName": "NewName",
                    "lastName": "NewLastName",
                    "email": "newuser@example.com",
                    "githubUsername": "newuser",
                    "linkedinUrl": "https://www.linkedin.com/in/newuser/",
                    "password": "password456",
                    "roleId": 1,
                    "deletedDate": null
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "Get user by id",
        "description": "Show the user's record whose id was provided",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Id of the user to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "User information with the provided id",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/definitions/createdUser" },
                "example": {
                  "id": 103,
                  "username": "NewUser",
                  "firstName": "NewName",
                  "lastName": "NewLastName",
                  "email": "newuser@example.com",
                  "githubUsername": "newuser",
                  "linkedinUrl": "https://www.linkedin.com/in/newuser/",
                  "password": "password456",
                  "roleId": 1,
                  "deletedDate": null
                }
              }
            }
          },
          "404": {
            "description": "The provided user id does not correspond to any user identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No user with the informed id was found"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update user by id",
        "description": "Update one or more fields of a specific user",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Id of the user to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/definitions/updatedUser" },
              "example": {
                "firstName": "NewName",
                "lastName": "NewLastName"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/definitions/createdUser" },
                "example": {
                  "id": 103,
                  "username": "NewUser",
                  "firstName": "NewName",
                  "lastName": "NewLastName",
                  "email": "newuser@example.com",
                  "githubUsername": "newuser",
                  "linkedinUrl": "https://www.linkedin.com/in/newuser/",
                  "password": "password456",
                  "roleId": 1,
                  "deletedDate": null
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "examples": {
                  "Invalid body": {
                    "value": {
                      "firstName": ["Expected string, received number"]
                    }
                  },
                  "No field provided for update": {
                    "value": {
                      "message": "No valid field was provided for update"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "Only a admin or the user itself can update his info",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided user id does not correspond to any user identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "User not found": {
                    "value": {
                      "message": "No user with the informed id was found"
                    }
                  },
                  "Role not found": {
                    "value": {
                      "message": "No role with the informed id was found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete user by id",
        "description": "Delete the user whose id was provided",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": { "type": "integer" },
            "description": "Id of the user to delete"
          }
        ],
        "responses": {
          "204": { "description": "User deleted successfully" },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "examples": {
                  "Missing bearer token": {
                    "description": "The user didn't include the token before sending the request",
                    "value": {
                      "message": "Missing bearer token"
                    }
                  },
                  "Incorrect bearer token": {
                    "description": "The provided token is invalid",
                    "value": {
                      "message": "jwt malformed"
                    }
                  },
                  "User doesn't have permission to access the route": {
                    "description": "Only a admin or the user with the provided id can delete himself",
                    "value": {
                      "message": "The user is unauthorized to access the route or to perform this operation with other users records"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The provided user id does not correspond to any user identifier in the database",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/errorMessage"
                },
                "example": {
                  "message": "No user with the informed id was found"
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "summary": "User login",
        "description": "Authenticate and login a user, returning a token that can be used in routes that require authentication",
        "tags": ["Users"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/definitions/loggedUser" },
              "example": {
                "email": "newuser@example.com",
                "password": "password456"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User logged in successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/definitions/userLogin" },
                "example": {
                  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImxhYWhjb2xsaW5zMTZAZ21haWwuY29tIiwiaWF0IjoxNzA0ODY4MDAxLCJleHAiOjE3MDQ5NTQ0MDEsInN1YiI6ImxhYWhjb2xsaW5zMTZAZ21haWwuY29tIn0.N1EVxjhwcPosBIcgjIEa5I2O0eR6AaT6NzU25Iblsdo"
                }
              }
            }
          },
          "400": {
            "description": "The body is missing required properties, or the format of their values is incorrect",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/definitions/zodSingleErrorMessage"
                },
                "example": {"email": ["Expected string, received number"]
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "newAnswer": {
      "type": "object",
      "properties": {
        "answer": {
          "type": "string",
          "description": "One of the possible question's answers",
          "required": true
        },
        "questionId": {
          "type": "number",
          "description": "The id of the question to which the answer is related",
          "required": true
        },
        "isRight": {
          "type": "boolean",
          "description": "Indicates if it's the question's right answer",
          "required": true
        }
      }
    },
    "updatedAnswer": {
      "type": "object",
      "properties": {
        "answer": {
          "type": "string",
          "description": "One of the possible question's answers"
        },
        "isRight": {
          "type": "boolean",
          "description": "Indicates if it's the question's right answer"
        }
      }
    },
    "createdAnswer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "description": "Id of the created answer",
          "example": 1
        },
        "answer": {
          "type": "string",
          "description": "One of the possible question's answers",
          "example": "HTML defines the structure of a web page",
          "required": true
        },
        "questionId": {
          "type": "number",
          "description": "The id of the question to which the answer is related",
          "example": 1,
          "required": true
        },
        "isRight": {
          "type": "boolean",
          "description": "Indicates if it's the question's right answer",
          "defalt": false,
          "example": true,
          "required": true
        }
      }
    },
    "newLearner": {
      "type": "object",
      "properties": {
        "vacancyId": {
          "type": "number",
          "description": "Id of the vacancy to which the learner is applying",
          "required": true
        }
      }
    },
    "createdLearner": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "description": "Id of the created learner",
          "example": 27,
          "required": true
        },
        "vacancyId": {
          "type": "number",
          "description": "Id of the vacancy associated with the learner",
          "example": 34,
          "required": true
        },
        "candidateId": {
          "type": "number",
          "description": "Id of the candidate learner",
          "example": 3,
          "required": true
        },
        "createdDate": {
          "type": "string",
          "description": "Date when the learner was created",
          "example": "2023-12-31T19:54:06.490Z",
          "required": true
        }
      }
    },
    "newProject": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the project",
          "example": "Project ABC",
          "required": true
        },
        "description": {
          "type": "string",
          "description": "Description of the project",
          "example": "A description of Project ABC",
          "required": true
        },
        "closeDate": {
          "type": "string",
          "format": "date-time",
          "description": "Closing date of the project",
          "example": "2024-01-31T00:00:00Z",
          "required": true
        },
        "repositoryUrl": {
          "type": "string",
          "description": "URL of the project's repository",
          "example": "https://github.com/project_abc"
        },
        "memberSelectionMethod": {
          "type": "string",
          "description": "Method of selecting project members",
          "enum": ["AleatÃ³ria", "Ordem de inscriÃ§Ã£o", "SeleÃ§Ã£o manual"],
          "example": "AleatÃ³ria",
          "required": true
        }
      }
    },
    "updatedProject": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the project",
          "example": "Project ABC"
        },
        "description": {
          "type": "string",
          "description": "Description of the project",
          "example": "A description of Project ABC"
        },
        "closeDate": {
          "type": "string",
          "format": "date-time",
          "description": "Closing date of the project",
          "example": "2024-01-31T00:00:00Z"
        },
        "repositoryUrl": {
          "type": "string",
          "description": "URL of the project's repository",
          "example": "https://github.com/project_abc"
        },
        "memberSelectionMethod": {
          "type": "string",
          "description": "Method of selecting project members",
          "enum": ["AleatÃ³ria", "Ordem de inscriÃ§Ã£o", "SeleÃ§Ã£o manual"],
          "example": "AleatÃ³ria"
        }
      }
    },
    "createdProject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number",
          "description": "ID of the created project",
          "example": 1
        },
        "name": {
          "type": "string",
          "description": "Name of the project",
          "example": "Project ABC"
        },
        "description": {
          "type": "string",
          "description": "Description of the project",
          "example": "A description of Project ABC"
        },
        "createdById": {
          "type": "number",
          "description": "ID of the creator of the project",
          "example": 123
        },
        "createdDate": {
          "type": "string",
          "format": "date-time",
          "description": "Date when the project was created",
          "example": "2024-01-01T00:00:00Z"
        },
        "closeDate": {
          "type": "string",
          "format": "date-time",
          "description": "Closing date of the project",
          "example": "2024-01-31T00:00:00Z"
        },
        "repositoryUrl": {
          "type": "string",
          "description": "URL of the project's repository",
          "example": "https://github.com/project_abc"
        },
        "memberSelectionMethod": {
          "type": "string",
          "description": "Method of selecting project members",
          "enum": ["AleatÃ³ria", "Ordem de inscriÃ§Ã£o", "SeleÃ§Ã£o manual"],
          "example": "AleatÃ³ria"
        }
      }
    },
    "newQuestion": {
      "type": "object",
      "properties": {
        "question": {
          "type": "string",
          "description": "The question text"
        },
        "technologyId": {
          "type": "integer",
          "description": "The ID of the technology associated with the question"
        },
        "difficultyLevel": {
          "type": "integer",
          "description": "The difficulty level of the question (1-3)"
        }
      },
      "required": ["question", "technologyId", "difficultyLevel"]
    },
    "createdQuestion": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The id of the created question"
        },
        "question": {
          "type": "string",
          "description": "The question text"
        },
        "technologyId": {
          "type": "integer",
          "description": "The ID of the technology associated with the question"
        },
        "difficultyLevel": {
          "type": "integer",
          "description": "The difficulty level of the question (1-3)"
        }
      },
      "required": ["question", "technologyId", "difficultyLevel"]
    },
    "updatedQuestion": {
      "type": "object",
      "properties": {
        "question": {
          "type": "string",
          "description": "The updated question text"
        },
        "technologyId": {
          "type": "integer",
          "description": "The updated ID of the technology associated with the question"
        },
        "difficultyLevel": {
          "type": "integer",
          "description": "The updated difficulty level of the question (1-3)"
        }
      }
    },
    "questionWithTechnology": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "The ID of the question"
        },
        "question": {
          "type": "string",
          "description": "The question text"
        },
        "technologyId": {
          "type": "integer",
          "description": "The ID of the technology associated with the question"
        },
        "difficultyLevel": {
          "type": "integer",
          "description": "The difficulty level of the question (1-3)"
        },
        "technology": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "The ID of the technology"
            },
            "name": {
              "type": "string",
              "description": "The name of the technology"
            },
            "iconUrl": {
              "type": "string",
              "description": "The URL to the technology's icon image"
            }
          }
        }
      }
    },
    "questionWithAnswers": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the question"
          },
          "question": {
            "type": "string",
            "description": "The question text"
          },
          "technologyId": {
            "type": "integer",
            "description": "The ID of the technology associated with the question"
          },
          "difficultyLevel": {
            "type": "integer",
            "description": "The difficulty level of the question (1-3)"
          },
          "answers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "The ID of the answer"
                },
                "answer": {
                  "type": "string",
                  "description": "The answer text"
                },
                "questionId": {
                  "type": "integer",
                  "description": "The ID of the associated question"
                }
              }
            }
          }
        }
      }
    },
    "participationRanking": {
      "type": "object",
      "properties": {
        "applicationsCount": {
          "type": "integer"
        },
        "userId": {
          "type": "integer"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "profilePicture": {
          "type": "string"
        }
      }
    },
    "ratingsMadeRanking": {
      "type": "object",
      "properties": {
        "ratingsMadeCount": {
          "type": "integer"
        },
        "id": {
          "type": "integer"
        },
        "userId": {
          "type": "integer"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "profilePicture": {
          "type": "string"
        }
      }
    },
    "ratingsAverageRanking": {
      "type": "object",
      "properties": {
        "averageRating": {
          "type": "number"
        },
        "userId": {
          "type": "integer"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "profilePicture": {
          "type": "string"
        }
      }
    },
    "rankingSubscriptions": {
      "type": "object",
      "properties": {
        "learnerSubscriptionsCount": {
          "type": "integer"
        },
        "userId": {
          "type": "integer"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "profilePicture": {
          "type": "string"
        }
      }
    },
    "rankingTestScores": {
      "type": "object",
      "properties": {
        "totalTestsScore": {
          "type": "number"
        },
        "userId": {
          "type": "integer"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "profilePicture": {
          "type": "string"
        }
      }
    },
    "rankingSkillScores": {
      "type": "object",
      "properties": {
        "skillScore": {
          "type": "number"
        },
        "userId": {
          "type": "integer"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "profilePicture": {
          "type": "string"
        },
        "technologyName": {
          "type": "string"
        }
      }
    },
    "newRating": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "grade": {
          "type": "number"
        },
        "ratedRecipientId": {
          "type": "integer"
        },
        "projectId": {
          "type": "integer"
        }
      },
      "required": ["comment", "grade", "ratedRecipientId", "projectId"]
    },
    "updatedRating": {
      "type": "object",
      "properties": {
        "comment": {
          "type": "string"
        },
        "grade": {
          "type": "number"
        }
      }
    },
    "createdRating": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "comment": {
          "type": "string"
        },
        "grade": {
          "type": "number"
        },
        "createdDate": {
          "type": "string"
        },
        "authorId": {
          "type": "integer"
        },
        "ratedRecipientId": {
          "type": "integer"
        },
        "projectId": {
          "type": "integer"
        }
      }
    },
    "ratingScore": {
      "type": "object",
      "properties": {
        "averageRating": {
          "type": "number"
        }
      }
    },
    "newTechnology": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "iconUrl": {
          "type": "string"
        }
      },
      "required": ["name"]
    },
    "createdTechnology": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "iconUrl": {
          "type": "string"
        }
      }
    },
    "testAnswer": {
      "type": "object",
      "properties": {
        "questionId": {
          "type": "number"
        },
        "answerId": {
          "type": "number"
        }
      },
      "required": ["questionId", "answerId"]
    },
    "createdTest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "number"
        },
        "userId": {
          "type": "number"
        },
        "technologyId": {
          "type": "number"
        },
        "score": {
          "type": "number"
        },
        "createdDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "evaluatedTest": {
      "type": "object",
      "properties": {
        "createdTest": {
          "$ref": "#/definitions/createdTest"
        },
        "isBiggestScore": {
          "type": "boolean"
        }
      }
    },
    "updatedTechnology": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "iconUrl": {
          "type": "string"
        }
      }
    },
    "createdUser": {
      "type": "object",
      "properties": {
        "id": { "type": "integer" },
        "username": { "type": "string" },
        "firstName": { "type": "string" },
        "lastName": { "type": "string" },
        "email": { "type": "string" },
        "password": { "type": "string" },
        "githubUsername": { "type": "string" },
        "linkedinUrl": { "type": "string" },
        "profilePicture": { "type": "string" },
        "roleId": { "type": "integer" }
      }
    },
    "newUser": {
      "type": "object",
      "properties": {
        "username": { "type": "string" },
        "firstName": { "type": "string" },
        "lastName": { "type": "string" },
        "email": { "type": "string" },
        "password": { "type": "string" },
        "githubUsername": { "type": "string" },
        "linkedinUrl": { "type": "string" },
        "profilePicture": { "type": "string" },
        "roleId": { "type": "integer" }
      }
    },
    "updatedUser": {
      "type": "object",
      "properties": {
        "firstName": { "type": "string" },
        "lastName": { "type": "string" },
        "password": { "type": "string" },
        "githubUsername": { "type": "string" },
        "linkedinUrl": { "type": "string" },
        "profilePicture": { "type": "string" },
        "roleId": { "type": "integer" }
      }
    },
    "loggedUser": {
      "type": "object",
      "properties": {
        "email": { "type": "string" },
        "password": { "type": "string" }
      }
    },
    "userLogin": {
      "type": "object",
      "properties": {
        "token": { "type": "string" }
      }
    },
    "errorMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "The reason of the error",
          "example": "No user with the informed id was found"
        }
      }
    },
    "zodErrorMessageList": {
      "type": "object",
      "properties": {
        "0": {
          "type": "array",
          "description": "A list with the error on the values detected by zod"
        }
      }
    },
    "zodSingleErrorMessage": {
      "type": "object",
      "properties": {
        "fieldWithError": {
          "type": "array"
        },
        "anotherFieldWithError": {
          "type": "array"
        }
      }
    }
  }
}
